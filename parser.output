Grammar

    0 $accept: program $end

    1 program: decl_list

    2 decl_list: decl decl_list
    3          | /* empty */

    4 decl: identifier colon type assign expr semicolon
    5     | identifier colon type semicolon
    6     | identifier colon type assign left_brace stmt_list right_brace

    7 stmt: open_stmt
    8     | closed_stmt

    9 closed_stmt: decl
   10            | expr semicolon
   11            | return opt_expr semicolon
   12            | print expr_list semicolon
   13            | for left_paren opt_expr semicolon opt_expr semicolon opt_expr right_paren closed_stmt
   14            | if left_paren expr right_paren closed_stmt else closed_stmt
   15            | left_brace stmt_list right_brace

   16 open_stmt: if left_paren expr right_paren stmt
   17          | if left_paren expr right_paren closed_stmt else open_stmt
   18          | for left_paren opt_expr semicolon opt_expr semicolon opt_expr right_paren open_stmt

   19 stmt_list: not_empty_stmt_list
   20          | /* empty */

   21 not_empty_stmt_list: stmt not_empty_stmt_list
   22                    | stmt

   23 expr: expr add primary_expr
   24     | expr subtract primary_expr
   25     | expr multiply primary_expr
   26     | expr divide primary_expr
   27     | expr eq primary_expr
   28     | expr ne primary_expr
   29     | expr gt primary_expr
   30     | expr ge primary_expr
   31     | expr lt primary_expr
   32     | expr le primary_expr
   33     | expr and primary_expr
   34     | expr or primary_expr
   35     | not primary_expr
   36     | expr increment
   37     | expr decrement
   38     | expr modulus primary_expr
   39     | expr exponentiate primary_expr
   40     | subtract primary_expr
   41     | primary_expr

   42 opt_expr: expr
   43         | /* empty */

   44 expr_list: not_empty_expr_list
   45          | /* empty */

   46 not_empty_expr_list: expr comma not_empty_expr_list
   47                    | expr

   48 primary_expr: identifier opt_parenthetical_expr_list
   49             | integer_literal
   50             | string_literal
   51             | char_literal
   52             | true
   53             | false
   54             | left_paren expr right_paren
   55             | left_brace not_empty_expr_list right_brace

   56 opt_parenthetical_expr_list: left_paren expr_list right_paren
   57                            | /* empty */

   58 type: integer
   59     | void
   60     | string
   61     | char
   62     | boolean
   63     | array left_bracket opt_expr right_bracket type
   64     | function type left_paren param_list right_paren

   65 param_list: not_empty_param_list
   66           | /* empty */

   67 not_empty_param_list: param
   68                     | param comma not_empty_param_list

   69 param: identifier

   70 print: TOKEN_PRINT

   71 function: TOKEN_FUNCTION

   72 for: TOKEN_FOR

   73 if: TOKEN_IF

   74 else: TOKEN_ELSE

   75 return: TOKEN_RETURN

   76 left_brace: TOKEN_LEFT_BRACE

   77 right_brace: TOKEN_RIGHT_BRACE

   78 left_paren: TOKEN_LEFT_PAREN

   79 right_paren: TOKEN_RIGHT_PAREN

   80 left_bracket: TOKEN_LEFT_BRACKET

   81 right_bracket: TOKEN_RIGHT_BRACKET

   82 string: TOKEN_STRING

   83 integer: TOKEN_INTEGER

   84 char: TOKEN_CHAR

   85 void: TOKEN_VOID

   86 boolean: TOKEN_BOOLEAN

   87 array: TOKEN_ARRAY

   88 ge: TOKEN_GE

   89 le: TOKEN_LE

   90 eq: TOKEN_EQ

   91 ne: TOKEN_NE

   92 lt: TOKEN_LT

   93 gt: TOKEN_GT

   94 and: TOKEN_AND

   95 or: TOKEN_OR

   96 not: TOKEN_NOT

   97 increment: TOKEN_INCREMENT

   98 decrement: TOKEN_DECREMENT

   99 add: TOKEN_ADD

  100 subtract: TOKEN_SUBTRACT

  101 multiply: TOKEN_MULTIPLY

  102 divide: TOKEN_DIVIDE

  103 modulus: TOKEN_MODULUS

  104 exponentiate: TOKEN_EXPONENTIATE

  105 assign: TOKEN_ASSIGN

  106 comma: TOKEN_COMMA

  107 colon: TOKEN_COLON

  108 semicolon: TOKEN_SEMICOLON

  109 true: TOKEN_TRUE

  110 false: TOKEN_FALSE

  111 char_literal: TOKEN_CHAR_LITERAL

  112 integer_literal: TOKEN_INTEGER_LITERAL

  113 string_literal: TOKEN_STRING_LITERAL

  114 identifier: TOKEN_IDENTIFIER


Terminals, with rules where they appear

$end (0) 0
error (256)
TOKEN_PRINT (258) 70
TOKEN_FUNCTION (259) 71
TOKEN_FOR (260) 72
TOKEN_IF (261) 73
TOKEN_ELSE (262) 74
TOKEN_RETURN (263) 75
TOKEN_LEFT_BRACE (264) 76
TOKEN_RIGHT_BRACE (265) 77
TOKEN_LEFT_PAREN (266) 78
TOKEN_RIGHT_PAREN (267) 79
TOKEN_LEFT_BRACKET (268) 80
TOKEN_RIGHT_BRACKET (269) 81
TOKEN_STRING (270) 82
TOKEN_INTEGER (271) 83
TOKEN_CHAR (272) 84
TOKEN_VOID (273) 85
TOKEN_BOOLEAN (274) 86
TOKEN_ARRAY (275) 87
TOKEN_GE (276) 88
TOKEN_LE (277) 89
TOKEN_EQ (278) 90
TOKEN_NE (279) 91
TOKEN_LT (280) 92
TOKEN_GT (281) 93
TOKEN_AND (282) 94
TOKEN_OR (283) 95
TOKEN_NOT (284) 96
TOKEN_INCREMENT (285) 97
TOKEN_DECREMENT (286) 98
TOKEN_ADD (287) 99
TOKEN_SUBTRACT (288) 100
TOKEN_MULTIPLY (289) 101
TOKEN_DIVIDE (290) 102
TOKEN_MODULUS (291) 103
TOKEN_EXPONENTIATE (292) 104
TOKEN_ASSIGN (293) 105
TOKEN_COMMA (294) 106
TOKEN_COLON (295) 107
TOKEN_SEMICOLON (296) 108
TOKEN_TRUE (297) 109
TOKEN_FALSE (298) 110
TOKEN_CHAR_LITERAL (299) 111
TOKEN_INTEGER_LITERAL (300) 112
TOKEN_STRING_LITERAL (301) 113
TOKEN_IDENTIFIER (302) 114


Nonterminals, with rules where they appear

$accept (48)
    on left: 0
program (49)
    on left: 1, on right: 0
decl_list (50)
    on left: 2 3, on right: 1 2
decl (51)
    on left: 4 5 6, on right: 2 9
stmt (52)
    on left: 7 8, on right: 16 21 22
closed_stmt (53)
    on left: 9 10 11 12 13 14 15, on right: 8 13 14 17
open_stmt (54)
    on left: 16 17 18, on right: 7 17 18
stmt_list (55)
    on left: 19 20, on right: 6 15
not_empty_stmt_list (56)
    on left: 21 22, on right: 19 21
expr (57)
    on left: 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40
    41, on right: 4 10 14 16 17 23 24 25 26 27 28 29 30 31 32 33 34
    36 37 38 39 42 46 47 54
opt_expr (58)
    on left: 42 43, on right: 11 13 18 63
expr_list (59)
    on left: 44 45, on right: 12 56
not_empty_expr_list (60)
    on left: 46 47, on right: 44 46 55
primary_expr (61)
    on left: 48 49 50 51 52 53 54 55, on right: 23 24 25 26 27 28 29
    30 31 32 33 34 35 38 39 40 41
opt_parenthetical_expr_list (62)
    on left: 56 57, on right: 48
type (63)
    on left: 58 59 60 61 62 63 64, on right: 4 5 6 63 64
param_list (64)
    on left: 65 66, on right: 64
not_empty_param_list (65)
    on left: 67 68, on right: 65 68
param (66)
    on left: 69, on right: 67 68
print (67)
    on left: 70, on right: 12
function (68)
    on left: 71, on right: 64
for (69)
    on left: 72, on right: 13 18
if (70)
    on left: 73, on right: 14 16 17
else (71)
    on left: 74, on right: 14 17
return (72)
    on left: 75, on right: 11
left_brace (73)
    on left: 76, on right: 6 15 55
right_brace (74)
    on left: 77, on right: 6 15 55
left_paren (75)
    on left: 78, on right: 13 14 16 17 18 54 56 64
right_paren (76)
    on left: 79, on right: 13 14 16 17 18 54 56 64
left_bracket (77)
    on left: 80, on right: 63
right_bracket (78)
    on left: 81, on right: 63
string (79)
    on left: 82, on right: 60
integer (80)
    on left: 83, on right: 58
char (81)
    on left: 84, on right: 61
void (82)
    on left: 85, on right: 59
boolean (83)
    on left: 86, on right: 62
array (84)
    on left: 87, on right: 63
ge (85)
    on left: 88, on right: 30
le (86)
    on left: 89, on right: 32
eq (87)
    on left: 90, on right: 27
ne (88)
    on left: 91, on right: 28
lt (89)
    on left: 92, on right: 31
gt (90)
    on left: 93, on right: 29
and (91)
    on left: 94, on right: 33
or (92)
    on left: 95, on right: 34
not (93)
    on left: 96, on right: 35
increment (94)
    on left: 97, on right: 36
decrement (95)
    on left: 98, on right: 37
add (96)
    on left: 99, on right: 23
subtract (97)
    on left: 100, on right: 24 40
multiply (98)
    on left: 101, on right: 25
divide (99)
    on left: 102, on right: 26
modulus (100)
    on left: 103, on right: 38
exponentiate (101)
    on left: 104, on right: 39
assign (102)
    on left: 105, on right: 4 6
comma (103)
    on left: 106, on right: 46 68
colon (104)
    on left: 107, on right: 4 5 6
semicolon (105)
    on left: 108, on right: 4 5 10 11 12 13 18
true (106)
    on left: 109, on right: 52
false (107)
    on left: 110, on right: 53
char_literal (108)
    on left: 111, on right: 51
integer_literal (109)
    on left: 112, on right: 49
string_literal (110)
    on left: 113, on right: 50
identifier (111)
    on left: 114, on right: 4 5 6 48 69


state 0

    0 $accept: . program $end

    TOKEN_IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 3 (decl_list)

    program     go to state 2
    decl_list   go to state 3
    decl        go to state 4
    identifier  go to state 5


state 1

  114 identifier: TOKEN_IDENTIFIER .

    $default  reduce using rule 114 (identifier)


state 2

    0 $accept: program . $end

    $end  shift, and go to state 6


state 3

    1 program: decl_list .

    $default  reduce using rule 1 (program)


state 4

    2 decl_list: decl . decl_list

    TOKEN_IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 3 (decl_list)

    decl_list   go to state 7
    decl        go to state 4
    identifier  go to state 5


state 5

    4 decl: identifier . colon type assign expr semicolon
    5     | identifier . colon type semicolon
    6     | identifier . colon type assign left_brace stmt_list right_brace

    TOKEN_COLON  shift, and go to state 8

    colon  go to state 9


state 6

    0 $accept: program $end .

    $default  accept


state 7

    2 decl_list: decl decl_list .

    $default  reduce using rule 2 (decl_list)


state 8

  107 colon: TOKEN_COLON .

    $default  reduce using rule 107 (colon)


state 9

    4 decl: identifier colon . type assign expr semicolon
    5     | identifier colon . type semicolon
    6     | identifier colon . type assign left_brace stmt_list right_brace

    TOKEN_FUNCTION  shift, and go to state 10
    TOKEN_STRING    shift, and go to state 11
    TOKEN_INTEGER   shift, and go to state 12
    TOKEN_CHAR      shift, and go to state 13
    TOKEN_VOID      shift, and go to state 14
    TOKEN_BOOLEAN   shift, and go to state 15
    TOKEN_ARRAY     shift, and go to state 16

    type      go to state 17
    function  go to state 18
    string    go to state 19
    integer   go to state 20
    char      go to state 21
    void      go to state 22
    boolean   go to state 23
    array     go to state 24


state 10

   71 function: TOKEN_FUNCTION .

    $default  reduce using rule 71 (function)


state 11

   82 string: TOKEN_STRING .

    $default  reduce using rule 82 (string)


state 12

   83 integer: TOKEN_INTEGER .

    $default  reduce using rule 83 (integer)


state 13

   84 char: TOKEN_CHAR .

    $default  reduce using rule 84 (char)


state 14

   85 void: TOKEN_VOID .

    $default  reduce using rule 85 (void)


state 15

   86 boolean: TOKEN_BOOLEAN .

    $default  reduce using rule 86 (boolean)


state 16

   87 array: TOKEN_ARRAY .

    $default  reduce using rule 87 (array)


state 17

    4 decl: identifier colon type . assign expr semicolon
    5     | identifier colon type . semicolon
    6     | identifier colon type . assign left_brace stmt_list right_brace

    TOKEN_ASSIGN     shift, and go to state 25
    TOKEN_SEMICOLON  shift, and go to state 26

    assign     go to state 27
    semicolon  go to state 28


state 18

   64 type: function . type left_paren param_list right_paren

    TOKEN_FUNCTION  shift, and go to state 10
    TOKEN_STRING    shift, and go to state 11
    TOKEN_INTEGER   shift, and go to state 12
    TOKEN_CHAR      shift, and go to state 13
    TOKEN_VOID      shift, and go to state 14
    TOKEN_BOOLEAN   shift, and go to state 15
    TOKEN_ARRAY     shift, and go to state 16

    type      go to state 29
    function  go to state 18
    string    go to state 19
    integer   go to state 20
    char      go to state 21
    void      go to state 22
    boolean   go to state 23
    array     go to state 24


state 19

   60 type: string .

    $default  reduce using rule 60 (type)


state 20

   58 type: integer .

    $default  reduce using rule 58 (type)


state 21

   61 type: char .

    $default  reduce using rule 61 (type)


state 22

   59 type: void .

    $default  reduce using rule 59 (type)


state 23

   62 type: boolean .

    $default  reduce using rule 62 (type)


state 24

   63 type: array . left_bracket opt_expr right_bracket type

    TOKEN_LEFT_BRACKET  shift, and go to state 30

    left_bracket  go to state 31


state 25

  105 assign: TOKEN_ASSIGN .

    $default  reduce using rule 105 (assign)


state 26

  108 semicolon: TOKEN_SEMICOLON .

    $default  reduce using rule 108 (semicolon)


state 27

    4 decl: identifier colon type assign . expr semicolon
    6     | identifier colon type assign . left_brace stmt_list right_brace

    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_NOT              shift, and go to state 34
    TOKEN_SUBTRACT         shift, and go to state 35
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    expr             go to state 41
    primary_expr     go to state 42
    left_brace       go to state 43
    left_paren       go to state 44
    not              go to state 45
    subtract         go to state 46
    true             go to state 47
    false            go to state 48
    char_literal     go to state 49
    integer_literal  go to state 50
    string_literal   go to state 51
    identifier       go to state 52


state 28

    5 decl: identifier colon type semicolon .

    $default  reduce using rule 5 (decl)


state 29

   64 type: function type . left_paren param_list right_paren

    TOKEN_LEFT_PAREN  shift, and go to state 33

    left_paren  go to state 53


state 30

   80 left_bracket: TOKEN_LEFT_BRACKET .

    $default  reduce using rule 80 (left_bracket)


state 31

   63 type: array left_bracket . opt_expr right_bracket type

    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_NOT              shift, and go to state 34
    TOKEN_SUBTRACT         shift, and go to state 35
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    $default  reduce using rule 43 (opt_expr)

    expr             go to state 54
    opt_expr         go to state 55
    primary_expr     go to state 42
    left_brace       go to state 56
    left_paren       go to state 44
    not              go to state 45
    subtract         go to state 46
    true             go to state 47
    false            go to state 48
    char_literal     go to state 49
    integer_literal  go to state 50
    string_literal   go to state 51
    identifier       go to state 52


state 32

   76 left_brace: TOKEN_LEFT_BRACE .

    $default  reduce using rule 76 (left_brace)


state 33

   78 left_paren: TOKEN_LEFT_PAREN .

    $default  reduce using rule 78 (left_paren)


state 34

   96 not: TOKEN_NOT .

    $default  reduce using rule 96 (not)


state 35

  100 subtract: TOKEN_SUBTRACT .

    $default  reduce using rule 100 (subtract)


state 36

  109 true: TOKEN_TRUE .

    $default  reduce using rule 109 (true)


state 37

  110 false: TOKEN_FALSE .

    $default  reduce using rule 110 (false)


state 38

  111 char_literal: TOKEN_CHAR_LITERAL .

    $default  reduce using rule 111 (char_literal)


state 39

  112 integer_literal: TOKEN_INTEGER_LITERAL .

    $default  reduce using rule 112 (integer_literal)


state 40

  113 string_literal: TOKEN_STRING_LITERAL .

    $default  reduce using rule 113 (string_literal)


state 41

    4 decl: identifier colon type assign expr . semicolon
   23 expr: expr . add primary_expr
   24     | expr . subtract primary_expr
   25     | expr . multiply primary_expr
   26     | expr . divide primary_expr
   27     | expr . eq primary_expr
   28     | expr . ne primary_expr
   29     | expr . gt primary_expr
   30     | expr . ge primary_expr
   31     | expr . lt primary_expr
   32     | expr . le primary_expr
   33     | expr . and primary_expr
   34     | expr . or primary_expr
   36     | expr . increment
   37     | expr . decrement
   38     | expr . modulus primary_expr
   39     | expr . exponentiate primary_expr

    TOKEN_GE            shift, and go to state 57
    TOKEN_LE            shift, and go to state 58
    TOKEN_EQ            shift, and go to state 59
    TOKEN_NE            shift, and go to state 60
    TOKEN_LT            shift, and go to state 61
    TOKEN_GT            shift, and go to state 62
    TOKEN_AND           shift, and go to state 63
    TOKEN_OR            shift, and go to state 64
    TOKEN_INCREMENT     shift, and go to state 65
    TOKEN_DECREMENT     shift, and go to state 66
    TOKEN_ADD           shift, and go to state 67
    TOKEN_SUBTRACT      shift, and go to state 35
    TOKEN_MULTIPLY      shift, and go to state 68
    TOKEN_DIVIDE        shift, and go to state 69
    TOKEN_MODULUS       shift, and go to state 70
    TOKEN_EXPONENTIATE  shift, and go to state 71
    TOKEN_SEMICOLON     shift, and go to state 26

    ge            go to state 72
    le            go to state 73
    eq            go to state 74
    ne            go to state 75
    lt            go to state 76
    gt            go to state 77
    and           go to state 78
    or            go to state 79
    increment     go to state 80
    decrement     go to state 81
    add           go to state 82
    subtract      go to state 83
    multiply      go to state 84
    divide        go to state 85
    modulus       go to state 86
    exponentiate  go to state 87
    semicolon     go to state 88


state 42

   41 expr: primary_expr .

    $default  reduce using rule 41 (expr)


state 43

    6 decl: identifier colon type assign left_brace . stmt_list right_brace
   55 primary_expr: left_brace . not_empty_expr_list right_brace

    TOKEN_PRINT            shift, and go to state 89
    TOKEN_FOR              shift, and go to state 90
    TOKEN_IF               shift, and go to state 91
    TOKEN_RETURN           shift, and go to state 92
    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_NOT              shift, and go to state 34
    TOKEN_SUBTRACT         shift, and go to state 35
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    $default  reduce using rule 20 (stmt_list)

    decl                 go to state 93
    stmt                 go to state 94
    closed_stmt          go to state 95
    open_stmt            go to state 96
    stmt_list            go to state 97
    not_empty_stmt_list  go to state 98
    expr                 go to state 99
    not_empty_expr_list  go to state 100
    primary_expr         go to state 42
    print                go to state 101
    for                  go to state 102
    if                   go to state 103
    return               go to state 104
    left_brace           go to state 105
    left_paren           go to state 44
    not                  go to state 45
    subtract             go to state 46
    true                 go to state 47
    false                go to state 48
    char_literal         go to state 49
    integer_literal      go to state 50
    string_literal       go to state 51
    identifier           go to state 106


state 44

   54 primary_expr: left_paren . expr right_paren

    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_NOT              shift, and go to state 34
    TOKEN_SUBTRACT         shift, and go to state 35
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    expr             go to state 107
    primary_expr     go to state 42
    left_brace       go to state 56
    left_paren       go to state 44
    not              go to state 45
    subtract         go to state 46
    true             go to state 47
    false            go to state 48
    char_literal     go to state 49
    integer_literal  go to state 50
    string_literal   go to state 51
    identifier       go to state 52


state 45

   35 expr: not . primary_expr

    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    primary_expr     go to state 108
    left_brace       go to state 56
    left_paren       go to state 44
    true             go to state 47
    false            go to state 48
    char_literal     go to state 49
    integer_literal  go to state 50
    string_literal   go to state 51
    identifier       go to state 52


state 46

   40 expr: subtract . primary_expr

    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    primary_expr     go to state 109
    left_brace       go to state 56
    left_paren       go to state 44
    true             go to state 47
    false            go to state 48
    char_literal     go to state 49
    integer_literal  go to state 50
    string_literal   go to state 51
    identifier       go to state 52


state 47

   52 primary_expr: true .

    $default  reduce using rule 52 (primary_expr)


state 48

   53 primary_expr: false .

    $default  reduce using rule 53 (primary_expr)


state 49

   51 primary_expr: char_literal .

    $default  reduce using rule 51 (primary_expr)


state 50

   49 primary_expr: integer_literal .

    $default  reduce using rule 49 (primary_expr)


state 51

   50 primary_expr: string_literal .

    $default  reduce using rule 50 (primary_expr)


state 52

   48 primary_expr: identifier . opt_parenthetical_expr_list

    TOKEN_LEFT_PAREN  shift, and go to state 33

    $default  reduce using rule 57 (opt_parenthetical_expr_list)

    opt_parenthetical_expr_list  go to state 110
    left_paren                   go to state 111


state 53

   64 type: function type left_paren . param_list right_paren

    TOKEN_IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 66 (param_list)

    param_list            go to state 112
    not_empty_param_list  go to state 113
    param                 go to state 114
    identifier            go to state 115


state 54

   23 expr: expr . add primary_expr
   24     | expr . subtract primary_expr
   25     | expr . multiply primary_expr
   26     | expr . divide primary_expr
   27     | expr . eq primary_expr
   28     | expr . ne primary_expr
   29     | expr . gt primary_expr
   30     | expr . ge primary_expr
   31     | expr . lt primary_expr
   32     | expr . le primary_expr
   33     | expr . and primary_expr
   34     | expr . or primary_expr
   36     | expr . increment
   37     | expr . decrement
   38     | expr . modulus primary_expr
   39     | expr . exponentiate primary_expr
   42 opt_expr: expr .

    TOKEN_GE            shift, and go to state 57
    TOKEN_LE            shift, and go to state 58
    TOKEN_EQ            shift, and go to state 59
    TOKEN_NE            shift, and go to state 60
    TOKEN_LT            shift, and go to state 61
    TOKEN_GT            shift, and go to state 62
    TOKEN_AND           shift, and go to state 63
    TOKEN_OR            shift, and go to state 64
    TOKEN_INCREMENT     shift, and go to state 65
    TOKEN_DECREMENT     shift, and go to state 66
    TOKEN_ADD           shift, and go to state 67
    TOKEN_SUBTRACT      shift, and go to state 35
    TOKEN_MULTIPLY      shift, and go to state 68
    TOKEN_DIVIDE        shift, and go to state 69
    TOKEN_MODULUS       shift, and go to state 70
    TOKEN_EXPONENTIATE  shift, and go to state 71

    $default  reduce using rule 42 (opt_expr)

    ge            go to state 72
    le            go to state 73
    eq            go to state 74
    ne            go to state 75
    lt            go to state 76
    gt            go to state 77
    and           go to state 78
    or            go to state 79
    increment     go to state 80
    decrement     go to state 81
    add           go to state 82
    subtract      go to state 83
    multiply      go to state 84
    divide        go to state 85
    modulus       go to state 86
    exponentiate  go to state 87


state 55

   63 type: array left_bracket opt_expr . right_bracket type

    TOKEN_RIGHT_BRACKET  shift, and go to state 116

    right_bracket  go to state 117


state 56

   55 primary_expr: left_brace . not_empty_expr_list right_brace

    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_NOT              shift, and go to state 34
    TOKEN_SUBTRACT         shift, and go to state 35
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    expr                 go to state 118
    not_empty_expr_list  go to state 100
    primary_expr         go to state 42
    left_brace           go to state 56
    left_paren           go to state 44
    not                  go to state 45
    subtract             go to state 46
    true                 go to state 47
    false                go to state 48
    char_literal         go to state 49
    integer_literal      go to state 50
    string_literal       go to state 51
    identifier           go to state 52


state 57

   88 ge: TOKEN_GE .

    $default  reduce using rule 88 (ge)


state 58

   89 le: TOKEN_LE .

    $default  reduce using rule 89 (le)


state 59

   90 eq: TOKEN_EQ .

    $default  reduce using rule 90 (eq)


state 60

   91 ne: TOKEN_NE .

    $default  reduce using rule 91 (ne)


state 61

   92 lt: TOKEN_LT .

    $default  reduce using rule 92 (lt)


state 62

   93 gt: TOKEN_GT .

    $default  reduce using rule 93 (gt)


state 63

   94 and: TOKEN_AND .

    $default  reduce using rule 94 (and)


state 64

   95 or: TOKEN_OR .

    $default  reduce using rule 95 (or)


state 65

   97 increment: TOKEN_INCREMENT .

    $default  reduce using rule 97 (increment)


state 66

   98 decrement: TOKEN_DECREMENT .

    $default  reduce using rule 98 (decrement)


state 67

   99 add: TOKEN_ADD .

    $default  reduce using rule 99 (add)


state 68

  101 multiply: TOKEN_MULTIPLY .

    $default  reduce using rule 101 (multiply)


state 69

  102 divide: TOKEN_DIVIDE .

    $default  reduce using rule 102 (divide)


state 70

  103 modulus: TOKEN_MODULUS .

    $default  reduce using rule 103 (modulus)


state 71

  104 exponentiate: TOKEN_EXPONENTIATE .

    $default  reduce using rule 104 (exponentiate)


state 72

   30 expr: expr ge . primary_expr

    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    primary_expr     go to state 119
    left_brace       go to state 56
    left_paren       go to state 44
    true             go to state 47
    false            go to state 48
    char_literal     go to state 49
    integer_literal  go to state 50
    string_literal   go to state 51
    identifier       go to state 52


state 73

   32 expr: expr le . primary_expr

    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    primary_expr     go to state 120
    left_brace       go to state 56
    left_paren       go to state 44
    true             go to state 47
    false            go to state 48
    char_literal     go to state 49
    integer_literal  go to state 50
    string_literal   go to state 51
    identifier       go to state 52


state 74

   27 expr: expr eq . primary_expr

    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    primary_expr     go to state 121
    left_brace       go to state 56
    left_paren       go to state 44
    true             go to state 47
    false            go to state 48
    char_literal     go to state 49
    integer_literal  go to state 50
    string_literal   go to state 51
    identifier       go to state 52


state 75

   28 expr: expr ne . primary_expr

    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    primary_expr     go to state 122
    left_brace       go to state 56
    left_paren       go to state 44
    true             go to state 47
    false            go to state 48
    char_literal     go to state 49
    integer_literal  go to state 50
    string_literal   go to state 51
    identifier       go to state 52


state 76

   31 expr: expr lt . primary_expr

    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    primary_expr     go to state 123
    left_brace       go to state 56
    left_paren       go to state 44
    true             go to state 47
    false            go to state 48
    char_literal     go to state 49
    integer_literal  go to state 50
    string_literal   go to state 51
    identifier       go to state 52


state 77

   29 expr: expr gt . primary_expr

    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    primary_expr     go to state 124
    left_brace       go to state 56
    left_paren       go to state 44
    true             go to state 47
    false            go to state 48
    char_literal     go to state 49
    integer_literal  go to state 50
    string_literal   go to state 51
    identifier       go to state 52


state 78

   33 expr: expr and . primary_expr

    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    primary_expr     go to state 125
    left_brace       go to state 56
    left_paren       go to state 44
    true             go to state 47
    false            go to state 48
    char_literal     go to state 49
    integer_literal  go to state 50
    string_literal   go to state 51
    identifier       go to state 52


state 79

   34 expr: expr or . primary_expr

    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    primary_expr     go to state 126
    left_brace       go to state 56
    left_paren       go to state 44
    true             go to state 47
    false            go to state 48
    char_literal     go to state 49
    integer_literal  go to state 50
    string_literal   go to state 51
    identifier       go to state 52


state 80

   36 expr: expr increment .

    $default  reduce using rule 36 (expr)


state 81

   37 expr: expr decrement .

    $default  reduce using rule 37 (expr)


state 82

   23 expr: expr add . primary_expr

    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    primary_expr     go to state 127
    left_brace       go to state 56
    left_paren       go to state 44
    true             go to state 47
    false            go to state 48
    char_literal     go to state 49
    integer_literal  go to state 50
    string_literal   go to state 51
    identifier       go to state 52


state 83

   24 expr: expr subtract . primary_expr

    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    primary_expr     go to state 128
    left_brace       go to state 56
    left_paren       go to state 44
    true             go to state 47
    false            go to state 48
    char_literal     go to state 49
    integer_literal  go to state 50
    string_literal   go to state 51
    identifier       go to state 52


state 84

   25 expr: expr multiply . primary_expr

    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    primary_expr     go to state 129
    left_brace       go to state 56
    left_paren       go to state 44
    true             go to state 47
    false            go to state 48
    char_literal     go to state 49
    integer_literal  go to state 50
    string_literal   go to state 51
    identifier       go to state 52


state 85

   26 expr: expr divide . primary_expr

    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    primary_expr     go to state 130
    left_brace       go to state 56
    left_paren       go to state 44
    true             go to state 47
    false            go to state 48
    char_literal     go to state 49
    integer_literal  go to state 50
    string_literal   go to state 51
    identifier       go to state 52


state 86

   38 expr: expr modulus . primary_expr

    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    primary_expr     go to state 131
    left_brace       go to state 56
    left_paren       go to state 44
    true             go to state 47
    false            go to state 48
    char_literal     go to state 49
    integer_literal  go to state 50
    string_literal   go to state 51
    identifier       go to state 52


state 87

   39 expr: expr exponentiate . primary_expr

    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    primary_expr     go to state 132
    left_brace       go to state 56
    left_paren       go to state 44
    true             go to state 47
    false            go to state 48
    char_literal     go to state 49
    integer_literal  go to state 50
    string_literal   go to state 51
    identifier       go to state 52


state 88

    4 decl: identifier colon type assign expr semicolon .

    $default  reduce using rule 4 (decl)


state 89

   70 print: TOKEN_PRINT .

    $default  reduce using rule 70 (print)


state 90

   72 for: TOKEN_FOR .

    $default  reduce using rule 72 (for)


state 91

   73 if: TOKEN_IF .

    $default  reduce using rule 73 (if)


state 92

   75 return: TOKEN_RETURN .

    $default  reduce using rule 75 (return)


state 93

    9 closed_stmt: decl .

    $default  reduce using rule 9 (closed_stmt)


state 94

   21 not_empty_stmt_list: stmt . not_empty_stmt_list
   22                    | stmt .

    TOKEN_PRINT            shift, and go to state 89
    TOKEN_FOR              shift, and go to state 90
    TOKEN_IF               shift, and go to state 91
    TOKEN_RETURN           shift, and go to state 92
    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_NOT              shift, and go to state 34
    TOKEN_SUBTRACT         shift, and go to state 35
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    $default  reduce using rule 22 (not_empty_stmt_list)

    decl                 go to state 93
    stmt                 go to state 94
    closed_stmt          go to state 95
    open_stmt            go to state 96
    not_empty_stmt_list  go to state 133
    expr                 go to state 134
    primary_expr         go to state 42
    print                go to state 101
    for                  go to state 102
    if                   go to state 103
    return               go to state 104
    left_brace           go to state 105
    left_paren           go to state 44
    not                  go to state 45
    subtract             go to state 46
    true                 go to state 47
    false                go to state 48
    char_literal         go to state 49
    integer_literal      go to state 50
    string_literal       go to state 51
    identifier           go to state 106


state 95

    8 stmt: closed_stmt .

    $default  reduce using rule 8 (stmt)


state 96

    7 stmt: open_stmt .

    $default  reduce using rule 7 (stmt)


state 97

    6 decl: identifier colon type assign left_brace stmt_list . right_brace

    TOKEN_RIGHT_BRACE  shift, and go to state 135

    right_brace  go to state 136


state 98

   19 stmt_list: not_empty_stmt_list .

    $default  reduce using rule 19 (stmt_list)


state 99

   10 closed_stmt: expr . semicolon
   23 expr: expr . add primary_expr
   24     | expr . subtract primary_expr
   25     | expr . multiply primary_expr
   26     | expr . divide primary_expr
   27     | expr . eq primary_expr
   28     | expr . ne primary_expr
   29     | expr . gt primary_expr
   30     | expr . ge primary_expr
   31     | expr . lt primary_expr
   32     | expr . le primary_expr
   33     | expr . and primary_expr
   34     | expr . or primary_expr
   36     | expr . increment
   37     | expr . decrement
   38     | expr . modulus primary_expr
   39     | expr . exponentiate primary_expr
   46 not_empty_expr_list: expr . comma not_empty_expr_list
   47                    | expr .

    TOKEN_GE            shift, and go to state 57
    TOKEN_LE            shift, and go to state 58
    TOKEN_EQ            shift, and go to state 59
    TOKEN_NE            shift, and go to state 60
    TOKEN_LT            shift, and go to state 61
    TOKEN_GT            shift, and go to state 62
    TOKEN_AND           shift, and go to state 63
    TOKEN_OR            shift, and go to state 64
    TOKEN_INCREMENT     shift, and go to state 65
    TOKEN_DECREMENT     shift, and go to state 66
    TOKEN_ADD           shift, and go to state 67
    TOKEN_SUBTRACT      shift, and go to state 35
    TOKEN_MULTIPLY      shift, and go to state 68
    TOKEN_DIVIDE        shift, and go to state 69
    TOKEN_MODULUS       shift, and go to state 70
    TOKEN_EXPONENTIATE  shift, and go to state 71
    TOKEN_COMMA         shift, and go to state 137
    TOKEN_SEMICOLON     shift, and go to state 26

    $default  reduce using rule 47 (not_empty_expr_list)

    ge            go to state 72
    le            go to state 73
    eq            go to state 74
    ne            go to state 75
    lt            go to state 76
    gt            go to state 77
    and           go to state 78
    or            go to state 79
    increment     go to state 80
    decrement     go to state 81
    add           go to state 82
    subtract      go to state 83
    multiply      go to state 84
    divide        go to state 85
    modulus       go to state 86
    exponentiate  go to state 87
    comma         go to state 138
    semicolon     go to state 139


state 100

   55 primary_expr: left_brace not_empty_expr_list . right_brace

    TOKEN_RIGHT_BRACE  shift, and go to state 135

    right_brace  go to state 140


state 101

   12 closed_stmt: print . expr_list semicolon

    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_NOT              shift, and go to state 34
    TOKEN_SUBTRACT         shift, and go to state 35
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    $default  reduce using rule 45 (expr_list)

    expr                 go to state 118
    expr_list            go to state 141
    not_empty_expr_list  go to state 142
    primary_expr         go to state 42
    left_brace           go to state 56
    left_paren           go to state 44
    not                  go to state 45
    subtract             go to state 46
    true                 go to state 47
    false                go to state 48
    char_literal         go to state 49
    integer_literal      go to state 50
    string_literal       go to state 51
    identifier           go to state 52


state 102

   13 closed_stmt: for . left_paren opt_expr semicolon opt_expr semicolon opt_expr right_paren closed_stmt
   18 open_stmt: for . left_paren opt_expr semicolon opt_expr semicolon opt_expr right_paren open_stmt

    TOKEN_LEFT_PAREN  shift, and go to state 33

    left_paren  go to state 143


state 103

   14 closed_stmt: if . left_paren expr right_paren closed_stmt else closed_stmt
   16 open_stmt: if . left_paren expr right_paren stmt
   17          | if . left_paren expr right_paren closed_stmt else open_stmt

    TOKEN_LEFT_PAREN  shift, and go to state 33

    left_paren  go to state 144


state 104

   11 closed_stmt: return . opt_expr semicolon

    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_NOT              shift, and go to state 34
    TOKEN_SUBTRACT         shift, and go to state 35
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    $default  reduce using rule 43 (opt_expr)

    expr             go to state 54
    opt_expr         go to state 145
    primary_expr     go to state 42
    left_brace       go to state 56
    left_paren       go to state 44
    not              go to state 45
    subtract         go to state 46
    true             go to state 47
    false            go to state 48
    char_literal     go to state 49
    integer_literal  go to state 50
    string_literal   go to state 51
    identifier       go to state 52


state 105

   15 closed_stmt: left_brace . stmt_list right_brace
   55 primary_expr: left_brace . not_empty_expr_list right_brace

    TOKEN_PRINT            shift, and go to state 89
    TOKEN_FOR              shift, and go to state 90
    TOKEN_IF               shift, and go to state 91
    TOKEN_RETURN           shift, and go to state 92
    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_NOT              shift, and go to state 34
    TOKEN_SUBTRACT         shift, and go to state 35
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    $default  reduce using rule 20 (stmt_list)

    decl                 go to state 93
    stmt                 go to state 94
    closed_stmt          go to state 95
    open_stmt            go to state 96
    stmt_list            go to state 146
    not_empty_stmt_list  go to state 98
    expr                 go to state 99
    not_empty_expr_list  go to state 100
    primary_expr         go to state 42
    print                go to state 101
    for                  go to state 102
    if                   go to state 103
    return               go to state 104
    left_brace           go to state 105
    left_paren           go to state 44
    not                  go to state 45
    subtract             go to state 46
    true                 go to state 47
    false                go to state 48
    char_literal         go to state 49
    integer_literal      go to state 50
    string_literal       go to state 51
    identifier           go to state 106


state 106

    4 decl: identifier . colon type assign expr semicolon
    5     | identifier . colon type semicolon
    6     | identifier . colon type assign left_brace stmt_list right_brace
   48 primary_expr: identifier . opt_parenthetical_expr_list

    TOKEN_LEFT_PAREN  shift, and go to state 33
    TOKEN_COLON       shift, and go to state 8

    $default  reduce using rule 57 (opt_parenthetical_expr_list)

    opt_parenthetical_expr_list  go to state 110
    left_paren                   go to state 111
    colon                        go to state 9


state 107

   23 expr: expr . add primary_expr
   24     | expr . subtract primary_expr
   25     | expr . multiply primary_expr
   26     | expr . divide primary_expr
   27     | expr . eq primary_expr
   28     | expr . ne primary_expr
   29     | expr . gt primary_expr
   30     | expr . ge primary_expr
   31     | expr . lt primary_expr
   32     | expr . le primary_expr
   33     | expr . and primary_expr
   34     | expr . or primary_expr
   36     | expr . increment
   37     | expr . decrement
   38     | expr . modulus primary_expr
   39     | expr . exponentiate primary_expr
   54 primary_expr: left_paren expr . right_paren

    TOKEN_RIGHT_PAREN   shift, and go to state 147
    TOKEN_GE            shift, and go to state 57
    TOKEN_LE            shift, and go to state 58
    TOKEN_EQ            shift, and go to state 59
    TOKEN_NE            shift, and go to state 60
    TOKEN_LT            shift, and go to state 61
    TOKEN_GT            shift, and go to state 62
    TOKEN_AND           shift, and go to state 63
    TOKEN_OR            shift, and go to state 64
    TOKEN_INCREMENT     shift, and go to state 65
    TOKEN_DECREMENT     shift, and go to state 66
    TOKEN_ADD           shift, and go to state 67
    TOKEN_SUBTRACT      shift, and go to state 35
    TOKEN_MULTIPLY      shift, and go to state 68
    TOKEN_DIVIDE        shift, and go to state 69
    TOKEN_MODULUS       shift, and go to state 70
    TOKEN_EXPONENTIATE  shift, and go to state 71

    right_paren   go to state 148
    ge            go to state 72
    le            go to state 73
    eq            go to state 74
    ne            go to state 75
    lt            go to state 76
    gt            go to state 77
    and           go to state 78
    or            go to state 79
    increment     go to state 80
    decrement     go to state 81
    add           go to state 82
    subtract      go to state 83
    multiply      go to state 84
    divide        go to state 85
    modulus       go to state 86
    exponentiate  go to state 87


state 108

   35 expr: not primary_expr .

    $default  reduce using rule 35 (expr)


state 109

   40 expr: subtract primary_expr .

    $default  reduce using rule 40 (expr)


state 110

   48 primary_expr: identifier opt_parenthetical_expr_list .

    $default  reduce using rule 48 (primary_expr)


state 111

   56 opt_parenthetical_expr_list: left_paren . expr_list right_paren

    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_NOT              shift, and go to state 34
    TOKEN_SUBTRACT         shift, and go to state 35
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    $default  reduce using rule 45 (expr_list)

    expr                 go to state 118
    expr_list            go to state 149
    not_empty_expr_list  go to state 142
    primary_expr         go to state 42
    left_brace           go to state 56
    left_paren           go to state 44
    not                  go to state 45
    subtract             go to state 46
    true                 go to state 47
    false                go to state 48
    char_literal         go to state 49
    integer_literal      go to state 50
    string_literal       go to state 51
    identifier           go to state 52


state 112

   64 type: function type left_paren param_list . right_paren

    TOKEN_RIGHT_PAREN  shift, and go to state 147

    right_paren  go to state 150


state 113

   65 param_list: not_empty_param_list .

    $default  reduce using rule 65 (param_list)


state 114

   67 not_empty_param_list: param .
   68                     | param . comma not_empty_param_list

    TOKEN_COMMA  shift, and go to state 137

    $default  reduce using rule 67 (not_empty_param_list)

    comma  go to state 151


state 115

   69 param: identifier .

    $default  reduce using rule 69 (param)


state 116

   81 right_bracket: TOKEN_RIGHT_BRACKET .

    $default  reduce using rule 81 (right_bracket)


state 117

   63 type: array left_bracket opt_expr right_bracket . type

    TOKEN_FUNCTION  shift, and go to state 10
    TOKEN_STRING    shift, and go to state 11
    TOKEN_INTEGER   shift, and go to state 12
    TOKEN_CHAR      shift, and go to state 13
    TOKEN_VOID      shift, and go to state 14
    TOKEN_BOOLEAN   shift, and go to state 15
    TOKEN_ARRAY     shift, and go to state 16

    type      go to state 152
    function  go to state 18
    string    go to state 19
    integer   go to state 20
    char      go to state 21
    void      go to state 22
    boolean   go to state 23
    array     go to state 24


state 118

   23 expr: expr . add primary_expr
   24     | expr . subtract primary_expr
   25     | expr . multiply primary_expr
   26     | expr . divide primary_expr
   27     | expr . eq primary_expr
   28     | expr . ne primary_expr
   29     | expr . gt primary_expr
   30     | expr . ge primary_expr
   31     | expr . lt primary_expr
   32     | expr . le primary_expr
   33     | expr . and primary_expr
   34     | expr . or primary_expr
   36     | expr . increment
   37     | expr . decrement
   38     | expr . modulus primary_expr
   39     | expr . exponentiate primary_expr
   46 not_empty_expr_list: expr . comma not_empty_expr_list
   47                    | expr .

    TOKEN_GE            shift, and go to state 57
    TOKEN_LE            shift, and go to state 58
    TOKEN_EQ            shift, and go to state 59
    TOKEN_NE            shift, and go to state 60
    TOKEN_LT            shift, and go to state 61
    TOKEN_GT            shift, and go to state 62
    TOKEN_AND           shift, and go to state 63
    TOKEN_OR            shift, and go to state 64
    TOKEN_INCREMENT     shift, and go to state 65
    TOKEN_DECREMENT     shift, and go to state 66
    TOKEN_ADD           shift, and go to state 67
    TOKEN_SUBTRACT      shift, and go to state 35
    TOKEN_MULTIPLY      shift, and go to state 68
    TOKEN_DIVIDE        shift, and go to state 69
    TOKEN_MODULUS       shift, and go to state 70
    TOKEN_EXPONENTIATE  shift, and go to state 71
    TOKEN_COMMA         shift, and go to state 137

    $default  reduce using rule 47 (not_empty_expr_list)

    ge            go to state 72
    le            go to state 73
    eq            go to state 74
    ne            go to state 75
    lt            go to state 76
    gt            go to state 77
    and           go to state 78
    or            go to state 79
    increment     go to state 80
    decrement     go to state 81
    add           go to state 82
    subtract      go to state 83
    multiply      go to state 84
    divide        go to state 85
    modulus       go to state 86
    exponentiate  go to state 87
    comma         go to state 138


state 119

   30 expr: expr ge primary_expr .

    $default  reduce using rule 30 (expr)


state 120

   32 expr: expr le primary_expr .

    $default  reduce using rule 32 (expr)


state 121

   27 expr: expr eq primary_expr .

    $default  reduce using rule 27 (expr)


state 122

   28 expr: expr ne primary_expr .

    $default  reduce using rule 28 (expr)


state 123

   31 expr: expr lt primary_expr .

    $default  reduce using rule 31 (expr)


state 124

   29 expr: expr gt primary_expr .

    $default  reduce using rule 29 (expr)


state 125

   33 expr: expr and primary_expr .

    $default  reduce using rule 33 (expr)


state 126

   34 expr: expr or primary_expr .

    $default  reduce using rule 34 (expr)


state 127

   23 expr: expr add primary_expr .

    $default  reduce using rule 23 (expr)


state 128

   24 expr: expr subtract primary_expr .

    $default  reduce using rule 24 (expr)


state 129

   25 expr: expr multiply primary_expr .

    $default  reduce using rule 25 (expr)


state 130

   26 expr: expr divide primary_expr .

    $default  reduce using rule 26 (expr)


state 131

   38 expr: expr modulus primary_expr .

    $default  reduce using rule 38 (expr)


state 132

   39 expr: expr exponentiate primary_expr .

    $default  reduce using rule 39 (expr)


state 133

   21 not_empty_stmt_list: stmt not_empty_stmt_list .

    $default  reduce using rule 21 (not_empty_stmt_list)


state 134

   10 closed_stmt: expr . semicolon
   23 expr: expr . add primary_expr
   24     | expr . subtract primary_expr
   25     | expr . multiply primary_expr
   26     | expr . divide primary_expr
   27     | expr . eq primary_expr
   28     | expr . ne primary_expr
   29     | expr . gt primary_expr
   30     | expr . ge primary_expr
   31     | expr . lt primary_expr
   32     | expr . le primary_expr
   33     | expr . and primary_expr
   34     | expr . or primary_expr
   36     | expr . increment
   37     | expr . decrement
   38     | expr . modulus primary_expr
   39     | expr . exponentiate primary_expr

    TOKEN_GE            shift, and go to state 57
    TOKEN_LE            shift, and go to state 58
    TOKEN_EQ            shift, and go to state 59
    TOKEN_NE            shift, and go to state 60
    TOKEN_LT            shift, and go to state 61
    TOKEN_GT            shift, and go to state 62
    TOKEN_AND           shift, and go to state 63
    TOKEN_OR            shift, and go to state 64
    TOKEN_INCREMENT     shift, and go to state 65
    TOKEN_DECREMENT     shift, and go to state 66
    TOKEN_ADD           shift, and go to state 67
    TOKEN_SUBTRACT      shift, and go to state 35
    TOKEN_MULTIPLY      shift, and go to state 68
    TOKEN_DIVIDE        shift, and go to state 69
    TOKEN_MODULUS       shift, and go to state 70
    TOKEN_EXPONENTIATE  shift, and go to state 71
    TOKEN_SEMICOLON     shift, and go to state 26

    ge            go to state 72
    le            go to state 73
    eq            go to state 74
    ne            go to state 75
    lt            go to state 76
    gt            go to state 77
    and           go to state 78
    or            go to state 79
    increment     go to state 80
    decrement     go to state 81
    add           go to state 82
    subtract      go to state 83
    multiply      go to state 84
    divide        go to state 85
    modulus       go to state 86
    exponentiate  go to state 87
    semicolon     go to state 139


state 135

   77 right_brace: TOKEN_RIGHT_BRACE .

    $default  reduce using rule 77 (right_brace)


state 136

    6 decl: identifier colon type assign left_brace stmt_list right_brace .

    $default  reduce using rule 6 (decl)


state 137

  106 comma: TOKEN_COMMA .

    $default  reduce using rule 106 (comma)


state 138

   46 not_empty_expr_list: expr comma . not_empty_expr_list

    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_NOT              shift, and go to state 34
    TOKEN_SUBTRACT         shift, and go to state 35
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    expr                 go to state 118
    not_empty_expr_list  go to state 153
    primary_expr         go to state 42
    left_brace           go to state 56
    left_paren           go to state 44
    not                  go to state 45
    subtract             go to state 46
    true                 go to state 47
    false                go to state 48
    char_literal         go to state 49
    integer_literal      go to state 50
    string_literal       go to state 51
    identifier           go to state 52


state 139

   10 closed_stmt: expr semicolon .

    $default  reduce using rule 10 (closed_stmt)


state 140

   55 primary_expr: left_brace not_empty_expr_list right_brace .

    $default  reduce using rule 55 (primary_expr)


state 141

   12 closed_stmt: print expr_list . semicolon

    TOKEN_SEMICOLON  shift, and go to state 26

    semicolon  go to state 154


state 142

   44 expr_list: not_empty_expr_list .

    $default  reduce using rule 44 (expr_list)


state 143

   13 closed_stmt: for left_paren . opt_expr semicolon opt_expr semicolon opt_expr right_paren closed_stmt
   18 open_stmt: for left_paren . opt_expr semicolon opt_expr semicolon opt_expr right_paren open_stmt

    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_NOT              shift, and go to state 34
    TOKEN_SUBTRACT         shift, and go to state 35
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    $default  reduce using rule 43 (opt_expr)

    expr             go to state 54
    opt_expr         go to state 155
    primary_expr     go to state 42
    left_brace       go to state 56
    left_paren       go to state 44
    not              go to state 45
    subtract         go to state 46
    true             go to state 47
    false            go to state 48
    char_literal     go to state 49
    integer_literal  go to state 50
    string_literal   go to state 51
    identifier       go to state 52


state 144

   14 closed_stmt: if left_paren . expr right_paren closed_stmt else closed_stmt
   16 open_stmt: if left_paren . expr right_paren stmt
   17          | if left_paren . expr right_paren closed_stmt else open_stmt

    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_NOT              shift, and go to state 34
    TOKEN_SUBTRACT         shift, and go to state 35
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    expr             go to state 156
    primary_expr     go to state 42
    left_brace       go to state 56
    left_paren       go to state 44
    not              go to state 45
    subtract         go to state 46
    true             go to state 47
    false            go to state 48
    char_literal     go to state 49
    integer_literal  go to state 50
    string_literal   go to state 51
    identifier       go to state 52


state 145

   11 closed_stmt: return opt_expr . semicolon

    TOKEN_SEMICOLON  shift, and go to state 26

    semicolon  go to state 157


state 146

   15 closed_stmt: left_brace stmt_list . right_brace

    TOKEN_RIGHT_BRACE  shift, and go to state 135

    right_brace  go to state 158


state 147

   79 right_paren: TOKEN_RIGHT_PAREN .

    $default  reduce using rule 79 (right_paren)


state 148

   54 primary_expr: left_paren expr right_paren .

    $default  reduce using rule 54 (primary_expr)


state 149

   56 opt_parenthetical_expr_list: left_paren expr_list . right_paren

    TOKEN_RIGHT_PAREN  shift, and go to state 147

    right_paren  go to state 159


state 150

   64 type: function type left_paren param_list right_paren .

    $default  reduce using rule 64 (type)


state 151

   68 not_empty_param_list: param comma . not_empty_param_list

    TOKEN_IDENTIFIER  shift, and go to state 1

    not_empty_param_list  go to state 160
    param                 go to state 114
    identifier            go to state 115


state 152

   63 type: array left_bracket opt_expr right_bracket type .

    $default  reduce using rule 63 (type)


state 153

   46 not_empty_expr_list: expr comma not_empty_expr_list .

    $default  reduce using rule 46 (not_empty_expr_list)


state 154

   12 closed_stmt: print expr_list semicolon .

    $default  reduce using rule 12 (closed_stmt)


state 155

   13 closed_stmt: for left_paren opt_expr . semicolon opt_expr semicolon opt_expr right_paren closed_stmt
   18 open_stmt: for left_paren opt_expr . semicolon opt_expr semicolon opt_expr right_paren open_stmt

    TOKEN_SEMICOLON  shift, and go to state 26

    semicolon  go to state 161


state 156

   14 closed_stmt: if left_paren expr . right_paren closed_stmt else closed_stmt
   16 open_stmt: if left_paren expr . right_paren stmt
   17          | if left_paren expr . right_paren closed_stmt else open_stmt
   23 expr: expr . add primary_expr
   24     | expr . subtract primary_expr
   25     | expr . multiply primary_expr
   26     | expr . divide primary_expr
   27     | expr . eq primary_expr
   28     | expr . ne primary_expr
   29     | expr . gt primary_expr
   30     | expr . ge primary_expr
   31     | expr . lt primary_expr
   32     | expr . le primary_expr
   33     | expr . and primary_expr
   34     | expr . or primary_expr
   36     | expr . increment
   37     | expr . decrement
   38     | expr . modulus primary_expr
   39     | expr . exponentiate primary_expr

    TOKEN_RIGHT_PAREN   shift, and go to state 147
    TOKEN_GE            shift, and go to state 57
    TOKEN_LE            shift, and go to state 58
    TOKEN_EQ            shift, and go to state 59
    TOKEN_NE            shift, and go to state 60
    TOKEN_LT            shift, and go to state 61
    TOKEN_GT            shift, and go to state 62
    TOKEN_AND           shift, and go to state 63
    TOKEN_OR            shift, and go to state 64
    TOKEN_INCREMENT     shift, and go to state 65
    TOKEN_DECREMENT     shift, and go to state 66
    TOKEN_ADD           shift, and go to state 67
    TOKEN_SUBTRACT      shift, and go to state 35
    TOKEN_MULTIPLY      shift, and go to state 68
    TOKEN_DIVIDE        shift, and go to state 69
    TOKEN_MODULUS       shift, and go to state 70
    TOKEN_EXPONENTIATE  shift, and go to state 71

    right_paren   go to state 162
    ge            go to state 72
    le            go to state 73
    eq            go to state 74
    ne            go to state 75
    lt            go to state 76
    gt            go to state 77
    and           go to state 78
    or            go to state 79
    increment     go to state 80
    decrement     go to state 81
    add           go to state 82
    subtract      go to state 83
    multiply      go to state 84
    divide        go to state 85
    modulus       go to state 86
    exponentiate  go to state 87


state 157

   11 closed_stmt: return opt_expr semicolon .

    $default  reduce using rule 11 (closed_stmt)


state 158

   15 closed_stmt: left_brace stmt_list right_brace .

    $default  reduce using rule 15 (closed_stmt)


state 159

   56 opt_parenthetical_expr_list: left_paren expr_list right_paren .

    $default  reduce using rule 56 (opt_parenthetical_expr_list)


state 160

   68 not_empty_param_list: param comma not_empty_param_list .

    $default  reduce using rule 68 (not_empty_param_list)


state 161

   13 closed_stmt: for left_paren opt_expr semicolon . opt_expr semicolon opt_expr right_paren closed_stmt
   18 open_stmt: for left_paren opt_expr semicolon . opt_expr semicolon opt_expr right_paren open_stmt

    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_NOT              shift, and go to state 34
    TOKEN_SUBTRACT         shift, and go to state 35
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    $default  reduce using rule 43 (opt_expr)

    expr             go to state 54
    opt_expr         go to state 163
    primary_expr     go to state 42
    left_brace       go to state 56
    left_paren       go to state 44
    not              go to state 45
    subtract         go to state 46
    true             go to state 47
    false            go to state 48
    char_literal     go to state 49
    integer_literal  go to state 50
    string_literal   go to state 51
    identifier       go to state 52


state 162

   14 closed_stmt: if left_paren expr right_paren . closed_stmt else closed_stmt
   16 open_stmt: if left_paren expr right_paren . stmt
   17          | if left_paren expr right_paren . closed_stmt else open_stmt

    TOKEN_PRINT            shift, and go to state 89
    TOKEN_FOR              shift, and go to state 90
    TOKEN_IF               shift, and go to state 91
    TOKEN_RETURN           shift, and go to state 92
    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_NOT              shift, and go to state 34
    TOKEN_SUBTRACT         shift, and go to state 35
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    decl             go to state 93
    stmt             go to state 164
    closed_stmt      go to state 165
    open_stmt        go to state 96
    expr             go to state 134
    primary_expr     go to state 42
    print            go to state 101
    for              go to state 102
    if               go to state 103
    return           go to state 104
    left_brace       go to state 105
    left_paren       go to state 44
    not              go to state 45
    subtract         go to state 46
    true             go to state 47
    false            go to state 48
    char_literal     go to state 49
    integer_literal  go to state 50
    string_literal   go to state 51
    identifier       go to state 106


state 163

   13 closed_stmt: for left_paren opt_expr semicolon opt_expr . semicolon opt_expr right_paren closed_stmt
   18 open_stmt: for left_paren opt_expr semicolon opt_expr . semicolon opt_expr right_paren open_stmt

    TOKEN_SEMICOLON  shift, and go to state 26

    semicolon  go to state 166


state 164

   16 open_stmt: if left_paren expr right_paren stmt .

    $default  reduce using rule 16 (open_stmt)


state 165

    8 stmt: closed_stmt .
   14 closed_stmt: if left_paren expr right_paren closed_stmt . else closed_stmt
   17 open_stmt: if left_paren expr right_paren closed_stmt . else open_stmt

    TOKEN_ELSE  shift, and go to state 167

    $default  reduce using rule 8 (stmt)

    else  go to state 168


state 166

   13 closed_stmt: for left_paren opt_expr semicolon opt_expr semicolon . opt_expr right_paren closed_stmt
   18 open_stmt: for left_paren opt_expr semicolon opt_expr semicolon . opt_expr right_paren open_stmt

    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_NOT              shift, and go to state 34
    TOKEN_SUBTRACT         shift, and go to state 35
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    $default  reduce using rule 43 (opt_expr)

    expr             go to state 54
    opt_expr         go to state 169
    primary_expr     go to state 42
    left_brace       go to state 56
    left_paren       go to state 44
    not              go to state 45
    subtract         go to state 46
    true             go to state 47
    false            go to state 48
    char_literal     go to state 49
    integer_literal  go to state 50
    string_literal   go to state 51
    identifier       go to state 52


state 167

   74 else: TOKEN_ELSE .

    $default  reduce using rule 74 (else)


state 168

   14 closed_stmt: if left_paren expr right_paren closed_stmt else . closed_stmt
   17 open_stmt: if left_paren expr right_paren closed_stmt else . open_stmt

    TOKEN_PRINT            shift, and go to state 89
    TOKEN_FOR              shift, and go to state 90
    TOKEN_IF               shift, and go to state 91
    TOKEN_RETURN           shift, and go to state 92
    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_NOT              shift, and go to state 34
    TOKEN_SUBTRACT         shift, and go to state 35
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    decl             go to state 93
    closed_stmt      go to state 170
    open_stmt        go to state 171
    expr             go to state 134
    primary_expr     go to state 42
    print            go to state 101
    for              go to state 102
    if               go to state 103
    return           go to state 104
    left_brace       go to state 105
    left_paren       go to state 44
    not              go to state 45
    subtract         go to state 46
    true             go to state 47
    false            go to state 48
    char_literal     go to state 49
    integer_literal  go to state 50
    string_literal   go to state 51
    identifier       go to state 106


state 169

   13 closed_stmt: for left_paren opt_expr semicolon opt_expr semicolon opt_expr . right_paren closed_stmt
   18 open_stmt: for left_paren opt_expr semicolon opt_expr semicolon opt_expr . right_paren open_stmt

    TOKEN_RIGHT_PAREN  shift, and go to state 147

    right_paren  go to state 172


state 170

   14 closed_stmt: if left_paren expr right_paren closed_stmt else closed_stmt .

    $default  reduce using rule 14 (closed_stmt)


state 171

   17 open_stmt: if left_paren expr right_paren closed_stmt else open_stmt .

    $default  reduce using rule 17 (open_stmt)


state 172

   13 closed_stmt: for left_paren opt_expr semicolon opt_expr semicolon opt_expr right_paren . closed_stmt
   18 open_stmt: for left_paren opt_expr semicolon opt_expr semicolon opt_expr right_paren . open_stmt

    TOKEN_PRINT            shift, and go to state 89
    TOKEN_FOR              shift, and go to state 90
    TOKEN_IF               shift, and go to state 91
    TOKEN_RETURN           shift, and go to state 92
    TOKEN_LEFT_BRACE       shift, and go to state 32
    TOKEN_LEFT_PAREN       shift, and go to state 33
    TOKEN_NOT              shift, and go to state 34
    TOKEN_SUBTRACT         shift, and go to state 35
    TOKEN_TRUE             shift, and go to state 36
    TOKEN_FALSE            shift, and go to state 37
    TOKEN_CHAR_LITERAL     shift, and go to state 38
    TOKEN_INTEGER_LITERAL  shift, and go to state 39
    TOKEN_STRING_LITERAL   shift, and go to state 40
    TOKEN_IDENTIFIER       shift, and go to state 1

    decl             go to state 93
    closed_stmt      go to state 173
    open_stmt        go to state 174
    expr             go to state 134
    primary_expr     go to state 42
    print            go to state 101
    for              go to state 102
    if               go to state 103
    return           go to state 104
    left_brace       go to state 105
    left_paren       go to state 44
    not              go to state 45
    subtract         go to state 46
    true             go to state 47
    false            go to state 48
    char_literal     go to state 49
    integer_literal  go to state 50
    string_literal   go to state 51
    identifier       go to state 106


state 173

   13 closed_stmt: for left_paren opt_expr semicolon opt_expr semicolon opt_expr right_paren closed_stmt .

    $default  reduce using rule 13 (closed_stmt)


state 174

   18 open_stmt: for left_paren opt_expr semicolon opt_expr semicolon opt_expr right_paren open_stmt .

    $default  reduce using rule 18 (open_stmt)
