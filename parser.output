State 54 conflicts: 1 shift/reduce
State 93 conflicts: 16 shift/reduce
State 118 conflicts: 16 shift/reduce
State 119 conflicts: 16 shift/reduce
State 120 conflicts: 16 shift/reduce
State 121 conflicts: 16 shift/reduce
State 122 conflicts: 16 shift/reduce
State 123 conflicts: 16 shift/reduce
State 124 conflicts: 16 shift/reduce
State 125 conflicts: 16 shift/reduce
State 126 conflicts: 16 shift/reduce
State 127 conflicts: 16 shift/reduce
State 128 conflicts: 16 shift/reduce
State 129 conflicts: 16 shift/reduce
State 130 conflicts: 16 shift/reduce
State 131 conflicts: 16 shift/reduce
State 158 conflicts: 1 shift/reduce
State 167 conflicts: 16 reduce/reduce
State 172 conflicts: 16 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: decl_list

    2 decl_list: decl decl_list
    3          | /* empty */

    4 decl: identifier colon type eq expr semicolon
    5     | identifier colon type semicolon
    6     | identifier colon type assign left_brace stmt_list right_brace

    7 stmt: decl
    8     | expr semicolon
    9     | return opt_expr semicolon
   10     | print expr_list semicolon
   11     | for left_paren opt_expr semicolon opt_expr semicolon opt_expr right_paren stmt
   12     | if expr stmt
   13     | if expr stmt else stmt
   14     | left_brace stmt_list right_brace

   15 stmt_list: not_empty_stmt_list
   16          | /* empty */

   17 not_empty_stmt_list: stmt not_empty_stmt_list
   18                    | stmt

   19 expr: expr add expr
   20     | expr subtract expr
   21     | expr multiply expr
   22     | expr divide expr
   23     | expr eq expr
   24     | expr ne expr
   25     | expr gt expr
   26     | expr ge expr
   27     | expr lt expr
   28     | expr le expr
   29     | expr and expr
   30     | expr or expr
   31     | not expr
   32     | expr increment
   33     | expr decrement
   34     | expr modulus expr
   35     | expr exponentiate expr
   36     | primary_expr

   37 opt_expr: expr
   38         | /* empty */

   39 expr_list: not_empty_expr_list
   40          | /* empty */

   41 not_empty_expr_list: expr comma not_empty_expr_list
   42                    | expr

   43 primary_expr: identifier
   44             | identifier left_paren expr_list right_paren
   45             | integer_literal
   46             | string_literal
   47             | char_literal
   48             | true
   49             | false
   50             | left_paren expr right_paren
   51             | left_brace not_empty_expr_list right_brace
   52             | subtract integer_literal
   53             | subtract left_paren expr right_paren

   54 type: integer
   55     | void
   56     | string
   57     | char
   58     | boolean
   59     | array left_bracket opt_expr right_bracket type
   60     | function type left_paren param_list right_paren

   61 param_list: not_empty_param_list
   62           | /* empty */

   63 not_empty_param_list: param
   64                     | param comma not_empty_param_list

   65 param: identifier

   66 print: TOKEN_PRINT

   67 function: TOKEN_FUNCTION

   68 for: TOKEN_FOR

   69 if: TOKEN_IF

   70 else: TOKEN_ELSE

   71 return: TOKEN_RETURN

   72 left_brace: TOKEN_LEFT_BRACE

   73 right_brace: TOKEN_RIGHT_BRACE

   74 left_paren: TOKEN_LEFT_PAREN

   75 right_paren: TOKEN_RIGHT_PAREN

   76 left_bracket: TOKEN_LEFT_BRACKET

   77 right_bracket: TOKEN_RIGHT_BRACKET

   78 string: TOKEN_STRING

   79 integer: TOKEN_INTEGER

   80 char: TOKEN_CHAR

   81 void: TOKEN_VOID

   82 boolean: TOKEN_BOOLEAN

   83 array: TOKEN_ARRAY

   84 ge: TOKEN_GE

   85 le: TOKEN_LE

   86 eq: TOKEN_EQ

   87 ne: TOKEN_NE

   88 lt: TOKEN_LT

   89 gt: TOKEN_GT

   90 and: TOKEN_AND

   91 or: TOKEN_OR

   92 not: TOKEN_NOT

   93 increment: TOKEN_INCREMENT

   94 decrement: TOKEN_DECREMENT

   95 add: TOKEN_ADD

   96 subtract: TOKEN_SUBTRACT

   97 multiply: TOKEN_MULTIPLY

   98 divide: TOKEN_DIVIDE

   99 modulus: TOKEN_MODULUS

  100 exponentiate: TOKEN_EXPONENTIATE

  101 assign: TOKEN_ASSIGN

  102 comma: TOKEN_COMMA

  103 colon: TOKEN_COLON

  104 semicolon: TOKEN_SEMICOLON

  105 true: TOKEN_TRUE

  106 false: TOKEN_FALSE

  107 char_literal: TOKEN_CHAR_LITERAL

  108 integer_literal: TOKEN_INTEGER_LITERAL

  109 string_literal: TOKEN_STRING_LITERAL

  110 identifier: TOKEN_IDENTIFIER


Terminals, with rules where they appear

$end (0) 0
error (256)
TOKEN_PRINT (258) 66
TOKEN_FUNCTION (259) 67
TOKEN_FOR (260) 68
TOKEN_IF (261) 69
TOKEN_ELSE (262) 70
TOKEN_RETURN (263) 71
TOKEN_LEFT_BRACE (264) 72
TOKEN_RIGHT_BRACE (265) 73
TOKEN_LEFT_PAREN (266) 74
TOKEN_RIGHT_PAREN (267) 75
TOKEN_LEFT_BRACKET (268) 76
TOKEN_RIGHT_BRACKET (269) 77
TOKEN_STRING (270) 78
TOKEN_INTEGER (271) 79
TOKEN_CHAR (272) 80
TOKEN_VOID (273) 81
TOKEN_BOOLEAN (274) 82
TOKEN_ARRAY (275) 83
TOKEN_GE (276) 84
TOKEN_LE (277) 85
TOKEN_EQ (278) 86
TOKEN_NE (279) 87
TOKEN_LT (280) 88
TOKEN_GT (281) 89
TOKEN_AND (282) 90
TOKEN_OR (283) 91
TOKEN_NOT (284) 92
TOKEN_INCREMENT (285) 93
TOKEN_DECREMENT (286) 94
TOKEN_ADD (287) 95
TOKEN_SUBTRACT (288) 96
TOKEN_MULTIPLY (289) 97
TOKEN_DIVIDE (290) 98
TOKEN_MODULUS (291) 99
TOKEN_EXPONENTIATE (292) 100
TOKEN_ASSIGN (293) 101
TOKEN_COMMA (294) 102
TOKEN_COLON (295) 103
TOKEN_SEMICOLON (296) 104
TOKEN_TRUE (297) 105
TOKEN_FALSE (298) 106
TOKEN_CHAR_LITERAL (299) 107
TOKEN_INTEGER_LITERAL (300) 108
TOKEN_STRING_LITERAL (301) 109
TOKEN_IDENTIFIER (302) 110


Nonterminals, with rules where they appear

$accept (48)
    on left: 0
program (49)
    on left: 1, on right: 0
decl_list (50)
    on left: 2 3, on right: 1 2
decl (51)
    on left: 4 5 6, on right: 2 7
stmt (52)
    on left: 7 8 9 10 11 12 13 14, on right: 11 12 13 17 18
stmt_list (53)
    on left: 15 16, on right: 6 14
not_empty_stmt_list (54)
    on left: 17 18, on right: 15 17
expr (55)
    on left: 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36,
    on right: 4 8 12 13 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33
    34 35 37 41 42 50 53
opt_expr (56)
    on left: 37 38, on right: 9 11 59
expr_list (57)
    on left: 39 40, on right: 10 44
not_empty_expr_list (58)
    on left: 41 42, on right: 39 41 51
primary_expr (59)
    on left: 43 44 45 46 47 48 49 50 51 52 53, on right: 36
type (60)
    on left: 54 55 56 57 58 59 60, on right: 4 5 6 59 60
param_list (61)
    on left: 61 62, on right: 60
not_empty_param_list (62)
    on left: 63 64, on right: 61 64
param (63)
    on left: 65, on right: 63 64
print (64)
    on left: 66, on right: 10
function (65)
    on left: 67, on right: 60
for (66)
    on left: 68, on right: 11
if (67)
    on left: 69, on right: 12 13
else (68)
    on left: 70, on right: 13
return (69)
    on left: 71, on right: 9
left_brace (70)
    on left: 72, on right: 6 14 51
right_brace (71)
    on left: 73, on right: 6 14 51
left_paren (72)
    on left: 74, on right: 11 44 50 53 60
right_paren (73)
    on left: 75, on right: 11 44 50 53 60
left_bracket (74)
    on left: 76, on right: 59
right_bracket (75)
    on left: 77, on right: 59
string (76)
    on left: 78, on right: 56
integer (77)
    on left: 79, on right: 54
char (78)
    on left: 80, on right: 57
void (79)
    on left: 81, on right: 55
boolean (80)
    on left: 82, on right: 58
array (81)
    on left: 83, on right: 59
ge (82)
    on left: 84, on right: 26
le (83)
    on left: 85, on right: 28
eq (84)
    on left: 86, on right: 4 23
ne (85)
    on left: 87, on right: 24
lt (86)
    on left: 88, on right: 27
gt (87)
    on left: 89, on right: 25
and (88)
    on left: 90, on right: 29
or (89)
    on left: 91, on right: 30
not (90)
    on left: 92, on right: 31
increment (91)
    on left: 93, on right: 32
decrement (92)
    on left: 94, on right: 33
add (93)
    on left: 95, on right: 19
subtract (94)
    on left: 96, on right: 20 52 53
multiply (95)
    on left: 97, on right: 21
divide (96)
    on left: 98, on right: 22
modulus (97)
    on left: 99, on right: 34
exponentiate (98)
    on left: 100, on right: 35
assign (99)
    on left: 101, on right: 6
comma (100)
    on left: 102, on right: 41 64
colon (101)
    on left: 103, on right: 4 5 6
semicolon (102)
    on left: 104, on right: 4 5 8 9 10 11
true (103)
    on left: 105, on right: 48
false (104)
    on left: 106, on right: 49
char_literal (105)
    on left: 107, on right: 47
integer_literal (106)
    on left: 108, on right: 45 52
string_literal (107)
    on left: 109, on right: 46
identifier (108)
    on left: 110, on right: 4 5 6 43 44 65


state 0

    0 $accept: . program $end

    TOKEN_IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 3 (decl_list)

    program     go to state 2
    decl_list   go to state 3
    decl        go to state 4
    identifier  go to state 5


state 1

  110 identifier: TOKEN_IDENTIFIER .

    $default  reduce using rule 110 (identifier)


state 2

    0 $accept: program . $end

    $end  shift, and go to state 6


state 3

    1 program: decl_list .

    $default  reduce using rule 1 (program)


state 4

    2 decl_list: decl . decl_list

    TOKEN_IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 3 (decl_list)

    decl_list   go to state 7
    decl        go to state 4
    identifier  go to state 5


state 5

    4 decl: identifier . colon type eq expr semicolon
    5     | identifier . colon type semicolon
    6     | identifier . colon type assign left_brace stmt_list right_brace

    TOKEN_COLON  shift, and go to state 8

    colon  go to state 9


state 6

    0 $accept: program $end .

    $default  accept


state 7

    2 decl_list: decl decl_list .

    $default  reduce using rule 2 (decl_list)


state 8

  103 colon: TOKEN_COLON .

    $default  reduce using rule 103 (colon)


state 9

    4 decl: identifier colon . type eq expr semicolon
    5     | identifier colon . type semicolon
    6     | identifier colon . type assign left_brace stmt_list right_brace

    TOKEN_FUNCTION  shift, and go to state 10
    TOKEN_STRING    shift, and go to state 11
    TOKEN_INTEGER   shift, and go to state 12
    TOKEN_CHAR      shift, and go to state 13
    TOKEN_VOID      shift, and go to state 14
    TOKEN_BOOLEAN   shift, and go to state 15
    TOKEN_ARRAY     shift, and go to state 16

    type      go to state 17
    function  go to state 18
    string    go to state 19
    integer   go to state 20
    char      go to state 21
    void      go to state 22
    boolean   go to state 23
    array     go to state 24


state 10

   67 function: TOKEN_FUNCTION .

    $default  reduce using rule 67 (function)


state 11

   78 string: TOKEN_STRING .

    $default  reduce using rule 78 (string)


state 12

   79 integer: TOKEN_INTEGER .

    $default  reduce using rule 79 (integer)


state 13

   80 char: TOKEN_CHAR .

    $default  reduce using rule 80 (char)


state 14

   81 void: TOKEN_VOID .

    $default  reduce using rule 81 (void)


state 15

   82 boolean: TOKEN_BOOLEAN .

    $default  reduce using rule 82 (boolean)


state 16

   83 array: TOKEN_ARRAY .

    $default  reduce using rule 83 (array)


state 17

    4 decl: identifier colon type . eq expr semicolon
    5     | identifier colon type . semicolon
    6     | identifier colon type . assign left_brace stmt_list right_brace

    TOKEN_EQ         shift, and go to state 25
    TOKEN_ASSIGN     shift, and go to state 26
    TOKEN_SEMICOLON  shift, and go to state 27

    eq         go to state 28
    assign     go to state 29
    semicolon  go to state 30


state 18

   60 type: function . type left_paren param_list right_paren

    TOKEN_FUNCTION  shift, and go to state 10
    TOKEN_STRING    shift, and go to state 11
    TOKEN_INTEGER   shift, and go to state 12
    TOKEN_CHAR      shift, and go to state 13
    TOKEN_VOID      shift, and go to state 14
    TOKEN_BOOLEAN   shift, and go to state 15
    TOKEN_ARRAY     shift, and go to state 16

    type      go to state 31
    function  go to state 18
    string    go to state 19
    integer   go to state 20
    char      go to state 21
    void      go to state 22
    boolean   go to state 23
    array     go to state 24


state 19

   56 type: string .

    $default  reduce using rule 56 (type)


state 20

   54 type: integer .

    $default  reduce using rule 54 (type)


state 21

   57 type: char .

    $default  reduce using rule 57 (type)


state 22

   55 type: void .

    $default  reduce using rule 55 (type)


state 23

   58 type: boolean .

    $default  reduce using rule 58 (type)


state 24

   59 type: array . left_bracket opt_expr right_bracket type

    TOKEN_LEFT_BRACKET  shift, and go to state 32

    left_bracket  go to state 33


state 25

   86 eq: TOKEN_EQ .

    $default  reduce using rule 86 (eq)


state 26

  101 assign: TOKEN_ASSIGN .

    $default  reduce using rule 101 (assign)


state 27

  104 semicolon: TOKEN_SEMICOLON .

    $default  reduce using rule 104 (semicolon)


state 28

    4 decl: identifier colon type eq . expr semicolon

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    expr             go to state 43
    primary_expr     go to state 44
    left_brace       go to state 45
    left_paren       go to state 46
    not              go to state 47
    subtract         go to state 48
    true             go to state 49
    false            go to state 50
    char_literal     go to state 51
    integer_literal  go to state 52
    string_literal   go to state 53
    identifier       go to state 54


state 29

    6 decl: identifier colon type assign . left_brace stmt_list right_brace

    TOKEN_LEFT_BRACE  shift, and go to state 34

    left_brace  go to state 55


state 30

    5 decl: identifier colon type semicolon .

    $default  reduce using rule 5 (decl)


state 31

   60 type: function type . left_paren param_list right_paren

    TOKEN_LEFT_PAREN  shift, and go to state 35

    left_paren  go to state 56


state 32

   76 left_bracket: TOKEN_LEFT_BRACKET .

    $default  reduce using rule 76 (left_bracket)


state 33

   59 type: array left_bracket . opt_expr right_bracket type

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    $default  reduce using rule 38 (opt_expr)

    expr             go to state 57
    opt_expr         go to state 58
    primary_expr     go to state 44
    left_brace       go to state 45
    left_paren       go to state 46
    not              go to state 47
    subtract         go to state 48
    true             go to state 49
    false            go to state 50
    char_literal     go to state 51
    integer_literal  go to state 52
    string_literal   go to state 53
    identifier       go to state 54


state 34

   72 left_brace: TOKEN_LEFT_BRACE .

    $default  reduce using rule 72 (left_brace)


state 35

   74 left_paren: TOKEN_LEFT_PAREN .

    $default  reduce using rule 74 (left_paren)


state 36

   92 not: TOKEN_NOT .

    $default  reduce using rule 92 (not)


state 37

   96 subtract: TOKEN_SUBTRACT .

    $default  reduce using rule 96 (subtract)


state 38

  105 true: TOKEN_TRUE .

    $default  reduce using rule 105 (true)


state 39

  106 false: TOKEN_FALSE .

    $default  reduce using rule 106 (false)


state 40

  107 char_literal: TOKEN_CHAR_LITERAL .

    $default  reduce using rule 107 (char_literal)


state 41

  108 integer_literal: TOKEN_INTEGER_LITERAL .

    $default  reduce using rule 108 (integer_literal)


state 42

  109 string_literal: TOKEN_STRING_LITERAL .

    $default  reduce using rule 109 (string_literal)


state 43

    4 decl: identifier colon type eq expr . semicolon
   19 expr: expr . add expr
   20     | expr . subtract expr
   21     | expr . multiply expr
   22     | expr . divide expr
   23     | expr . eq expr
   24     | expr . ne expr
   25     | expr . gt expr
   26     | expr . ge expr
   27     | expr . lt expr
   28     | expr . le expr
   29     | expr . and expr
   30     | expr . or expr
   32     | expr . increment
   33     | expr . decrement
   34     | expr . modulus expr
   35     | expr . exponentiate expr

    TOKEN_GE            shift, and go to state 59
    TOKEN_LE            shift, and go to state 60
    TOKEN_EQ            shift, and go to state 25
    TOKEN_NE            shift, and go to state 61
    TOKEN_LT            shift, and go to state 62
    TOKEN_GT            shift, and go to state 63
    TOKEN_AND           shift, and go to state 64
    TOKEN_OR            shift, and go to state 65
    TOKEN_INCREMENT     shift, and go to state 66
    TOKEN_DECREMENT     shift, and go to state 67
    TOKEN_ADD           shift, and go to state 68
    TOKEN_SUBTRACT      shift, and go to state 37
    TOKEN_MULTIPLY      shift, and go to state 69
    TOKEN_DIVIDE        shift, and go to state 70
    TOKEN_MODULUS       shift, and go to state 71
    TOKEN_EXPONENTIATE  shift, and go to state 72
    TOKEN_SEMICOLON     shift, and go to state 27

    ge            go to state 73
    le            go to state 74
    eq            go to state 75
    ne            go to state 76
    lt            go to state 77
    gt            go to state 78
    and           go to state 79
    or            go to state 80
    increment     go to state 81
    decrement     go to state 82
    add           go to state 83
    subtract      go to state 84
    multiply      go to state 85
    divide        go to state 86
    modulus       go to state 87
    exponentiate  go to state 88
    semicolon     go to state 89


state 44

   36 expr: primary_expr .

    $default  reduce using rule 36 (expr)


state 45

   51 primary_expr: left_brace . not_empty_expr_list right_brace

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    expr                 go to state 90
    not_empty_expr_list  go to state 91
    primary_expr         go to state 44
    left_brace           go to state 45
    left_paren           go to state 46
    not                  go to state 47
    subtract             go to state 48
    true                 go to state 49
    false                go to state 50
    char_literal         go to state 51
    integer_literal      go to state 52
    string_literal       go to state 53
    identifier           go to state 54


state 46

   50 primary_expr: left_paren . expr right_paren

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    expr             go to state 92
    primary_expr     go to state 44
    left_brace       go to state 45
    left_paren       go to state 46
    not              go to state 47
    subtract         go to state 48
    true             go to state 49
    false            go to state 50
    char_literal     go to state 51
    integer_literal  go to state 52
    string_literal   go to state 53
    identifier       go to state 54


state 47

   31 expr: not . expr

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    expr             go to state 93
    primary_expr     go to state 44
    left_brace       go to state 45
    left_paren       go to state 46
    not              go to state 47
    subtract         go to state 48
    true             go to state 49
    false            go to state 50
    char_literal     go to state 51
    integer_literal  go to state 52
    string_literal   go to state 53
    identifier       go to state 54


state 48

   52 primary_expr: subtract . integer_literal
   53             | subtract . left_paren expr right_paren

    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_INTEGER_LITERAL  shift, and go to state 41

    left_paren       go to state 94
    integer_literal  go to state 95


state 49

   48 primary_expr: true .

    $default  reduce using rule 48 (primary_expr)


state 50

   49 primary_expr: false .

    $default  reduce using rule 49 (primary_expr)


state 51

   47 primary_expr: char_literal .

    $default  reduce using rule 47 (primary_expr)


state 52

   45 primary_expr: integer_literal .

    $default  reduce using rule 45 (primary_expr)


state 53

   46 primary_expr: string_literal .

    $default  reduce using rule 46 (primary_expr)


state 54

   43 primary_expr: identifier .
   44             | identifier . left_paren expr_list right_paren

    TOKEN_LEFT_PAREN  shift, and go to state 35

    TOKEN_LEFT_PAREN  [reduce using rule 43 (primary_expr)]
    $default          reduce using rule 43 (primary_expr)

    left_paren  go to state 96


state 55

    6 decl: identifier colon type assign left_brace . stmt_list right_brace

    TOKEN_PRINT            shift, and go to state 97
    TOKEN_FOR              shift, and go to state 98
    TOKEN_IF               shift, and go to state 99
    TOKEN_RETURN           shift, and go to state 100
    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    $default  reduce using rule 16 (stmt_list)

    decl                 go to state 101
    stmt                 go to state 102
    stmt_list            go to state 103
    not_empty_stmt_list  go to state 104
    expr                 go to state 105
    primary_expr         go to state 44
    print                go to state 106
    for                  go to state 107
    if                   go to state 108
    return               go to state 109
    left_brace           go to state 110
    left_paren           go to state 46
    not                  go to state 47
    subtract             go to state 48
    true                 go to state 49
    false                go to state 50
    char_literal         go to state 51
    integer_literal      go to state 52
    string_literal       go to state 53
    identifier           go to state 111


state 56

   60 type: function type left_paren . param_list right_paren

    TOKEN_IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 62 (param_list)

    param_list            go to state 112
    not_empty_param_list  go to state 113
    param                 go to state 114
    identifier            go to state 115


state 57

   19 expr: expr . add expr
   20     | expr . subtract expr
   21     | expr . multiply expr
   22     | expr . divide expr
   23     | expr . eq expr
   24     | expr . ne expr
   25     | expr . gt expr
   26     | expr . ge expr
   27     | expr . lt expr
   28     | expr . le expr
   29     | expr . and expr
   30     | expr . or expr
   32     | expr . increment
   33     | expr . decrement
   34     | expr . modulus expr
   35     | expr . exponentiate expr
   37 opt_expr: expr .

    TOKEN_GE            shift, and go to state 59
    TOKEN_LE            shift, and go to state 60
    TOKEN_EQ            shift, and go to state 25
    TOKEN_NE            shift, and go to state 61
    TOKEN_LT            shift, and go to state 62
    TOKEN_GT            shift, and go to state 63
    TOKEN_AND           shift, and go to state 64
    TOKEN_OR            shift, and go to state 65
    TOKEN_INCREMENT     shift, and go to state 66
    TOKEN_DECREMENT     shift, and go to state 67
    TOKEN_ADD           shift, and go to state 68
    TOKEN_SUBTRACT      shift, and go to state 37
    TOKEN_MULTIPLY      shift, and go to state 69
    TOKEN_DIVIDE        shift, and go to state 70
    TOKEN_MODULUS       shift, and go to state 71
    TOKEN_EXPONENTIATE  shift, and go to state 72

    $default  reduce using rule 37 (opt_expr)

    ge            go to state 73
    le            go to state 74
    eq            go to state 75
    ne            go to state 76
    lt            go to state 77
    gt            go to state 78
    and           go to state 79
    or            go to state 80
    increment     go to state 81
    decrement     go to state 82
    add           go to state 83
    subtract      go to state 84
    multiply      go to state 85
    divide        go to state 86
    modulus       go to state 87
    exponentiate  go to state 88


state 58

   59 type: array left_bracket opt_expr . right_bracket type

    TOKEN_RIGHT_BRACKET  shift, and go to state 116

    right_bracket  go to state 117


state 59

   84 ge: TOKEN_GE .

    $default  reduce using rule 84 (ge)


state 60

   85 le: TOKEN_LE .

    $default  reduce using rule 85 (le)


state 61

   87 ne: TOKEN_NE .

    $default  reduce using rule 87 (ne)


state 62

   88 lt: TOKEN_LT .

    $default  reduce using rule 88 (lt)


state 63

   89 gt: TOKEN_GT .

    $default  reduce using rule 89 (gt)


state 64

   90 and: TOKEN_AND .

    $default  reduce using rule 90 (and)


state 65

   91 or: TOKEN_OR .

    $default  reduce using rule 91 (or)


state 66

   93 increment: TOKEN_INCREMENT .

    $default  reduce using rule 93 (increment)


state 67

   94 decrement: TOKEN_DECREMENT .

    $default  reduce using rule 94 (decrement)


state 68

   95 add: TOKEN_ADD .

    $default  reduce using rule 95 (add)


state 69

   97 multiply: TOKEN_MULTIPLY .

    $default  reduce using rule 97 (multiply)


state 70

   98 divide: TOKEN_DIVIDE .

    $default  reduce using rule 98 (divide)


state 71

   99 modulus: TOKEN_MODULUS .

    $default  reduce using rule 99 (modulus)


state 72

  100 exponentiate: TOKEN_EXPONENTIATE .

    $default  reduce using rule 100 (exponentiate)


state 73

   26 expr: expr ge . expr

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    expr             go to state 118
    primary_expr     go to state 44
    left_brace       go to state 45
    left_paren       go to state 46
    not              go to state 47
    subtract         go to state 48
    true             go to state 49
    false            go to state 50
    char_literal     go to state 51
    integer_literal  go to state 52
    string_literal   go to state 53
    identifier       go to state 54


state 74

   28 expr: expr le . expr

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    expr             go to state 119
    primary_expr     go to state 44
    left_brace       go to state 45
    left_paren       go to state 46
    not              go to state 47
    subtract         go to state 48
    true             go to state 49
    false            go to state 50
    char_literal     go to state 51
    integer_literal  go to state 52
    string_literal   go to state 53
    identifier       go to state 54


state 75

   23 expr: expr eq . expr

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    expr             go to state 120
    primary_expr     go to state 44
    left_brace       go to state 45
    left_paren       go to state 46
    not              go to state 47
    subtract         go to state 48
    true             go to state 49
    false            go to state 50
    char_literal     go to state 51
    integer_literal  go to state 52
    string_literal   go to state 53
    identifier       go to state 54


state 76

   24 expr: expr ne . expr

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    expr             go to state 121
    primary_expr     go to state 44
    left_brace       go to state 45
    left_paren       go to state 46
    not              go to state 47
    subtract         go to state 48
    true             go to state 49
    false            go to state 50
    char_literal     go to state 51
    integer_literal  go to state 52
    string_literal   go to state 53
    identifier       go to state 54


state 77

   27 expr: expr lt . expr

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    expr             go to state 122
    primary_expr     go to state 44
    left_brace       go to state 45
    left_paren       go to state 46
    not              go to state 47
    subtract         go to state 48
    true             go to state 49
    false            go to state 50
    char_literal     go to state 51
    integer_literal  go to state 52
    string_literal   go to state 53
    identifier       go to state 54


state 78

   25 expr: expr gt . expr

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    expr             go to state 123
    primary_expr     go to state 44
    left_brace       go to state 45
    left_paren       go to state 46
    not              go to state 47
    subtract         go to state 48
    true             go to state 49
    false            go to state 50
    char_literal     go to state 51
    integer_literal  go to state 52
    string_literal   go to state 53
    identifier       go to state 54


state 79

   29 expr: expr and . expr

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    expr             go to state 124
    primary_expr     go to state 44
    left_brace       go to state 45
    left_paren       go to state 46
    not              go to state 47
    subtract         go to state 48
    true             go to state 49
    false            go to state 50
    char_literal     go to state 51
    integer_literal  go to state 52
    string_literal   go to state 53
    identifier       go to state 54


state 80

   30 expr: expr or . expr

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    expr             go to state 125
    primary_expr     go to state 44
    left_brace       go to state 45
    left_paren       go to state 46
    not              go to state 47
    subtract         go to state 48
    true             go to state 49
    false            go to state 50
    char_literal     go to state 51
    integer_literal  go to state 52
    string_literal   go to state 53
    identifier       go to state 54


state 81

   32 expr: expr increment .

    $default  reduce using rule 32 (expr)


state 82

   33 expr: expr decrement .

    $default  reduce using rule 33 (expr)


state 83

   19 expr: expr add . expr

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    expr             go to state 126
    primary_expr     go to state 44
    left_brace       go to state 45
    left_paren       go to state 46
    not              go to state 47
    subtract         go to state 48
    true             go to state 49
    false            go to state 50
    char_literal     go to state 51
    integer_literal  go to state 52
    string_literal   go to state 53
    identifier       go to state 54


state 84

   20 expr: expr subtract . expr

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    expr             go to state 127
    primary_expr     go to state 44
    left_brace       go to state 45
    left_paren       go to state 46
    not              go to state 47
    subtract         go to state 48
    true             go to state 49
    false            go to state 50
    char_literal     go to state 51
    integer_literal  go to state 52
    string_literal   go to state 53
    identifier       go to state 54


state 85

   21 expr: expr multiply . expr

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    expr             go to state 128
    primary_expr     go to state 44
    left_brace       go to state 45
    left_paren       go to state 46
    not              go to state 47
    subtract         go to state 48
    true             go to state 49
    false            go to state 50
    char_literal     go to state 51
    integer_literal  go to state 52
    string_literal   go to state 53
    identifier       go to state 54


state 86

   22 expr: expr divide . expr

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    expr             go to state 129
    primary_expr     go to state 44
    left_brace       go to state 45
    left_paren       go to state 46
    not              go to state 47
    subtract         go to state 48
    true             go to state 49
    false            go to state 50
    char_literal     go to state 51
    integer_literal  go to state 52
    string_literal   go to state 53
    identifier       go to state 54


state 87

   34 expr: expr modulus . expr

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    expr             go to state 130
    primary_expr     go to state 44
    left_brace       go to state 45
    left_paren       go to state 46
    not              go to state 47
    subtract         go to state 48
    true             go to state 49
    false            go to state 50
    char_literal     go to state 51
    integer_literal  go to state 52
    string_literal   go to state 53
    identifier       go to state 54


state 88

   35 expr: expr exponentiate . expr

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    expr             go to state 131
    primary_expr     go to state 44
    left_brace       go to state 45
    left_paren       go to state 46
    not              go to state 47
    subtract         go to state 48
    true             go to state 49
    false            go to state 50
    char_literal     go to state 51
    integer_literal  go to state 52
    string_literal   go to state 53
    identifier       go to state 54


state 89

    4 decl: identifier colon type eq expr semicolon .

    $default  reduce using rule 4 (decl)


state 90

   19 expr: expr . add expr
   20     | expr . subtract expr
   21     | expr . multiply expr
   22     | expr . divide expr
   23     | expr . eq expr
   24     | expr . ne expr
   25     | expr . gt expr
   26     | expr . ge expr
   27     | expr . lt expr
   28     | expr . le expr
   29     | expr . and expr
   30     | expr . or expr
   32     | expr . increment
   33     | expr . decrement
   34     | expr . modulus expr
   35     | expr . exponentiate expr
   41 not_empty_expr_list: expr . comma not_empty_expr_list
   42                    | expr .

    TOKEN_GE            shift, and go to state 59
    TOKEN_LE            shift, and go to state 60
    TOKEN_EQ            shift, and go to state 25
    TOKEN_NE            shift, and go to state 61
    TOKEN_LT            shift, and go to state 62
    TOKEN_GT            shift, and go to state 63
    TOKEN_AND           shift, and go to state 64
    TOKEN_OR            shift, and go to state 65
    TOKEN_INCREMENT     shift, and go to state 66
    TOKEN_DECREMENT     shift, and go to state 67
    TOKEN_ADD           shift, and go to state 68
    TOKEN_SUBTRACT      shift, and go to state 37
    TOKEN_MULTIPLY      shift, and go to state 69
    TOKEN_DIVIDE        shift, and go to state 70
    TOKEN_MODULUS       shift, and go to state 71
    TOKEN_EXPONENTIATE  shift, and go to state 72
    TOKEN_COMMA         shift, and go to state 132

    $default  reduce using rule 42 (not_empty_expr_list)

    ge            go to state 73
    le            go to state 74
    eq            go to state 75
    ne            go to state 76
    lt            go to state 77
    gt            go to state 78
    and           go to state 79
    or            go to state 80
    increment     go to state 81
    decrement     go to state 82
    add           go to state 83
    subtract      go to state 84
    multiply      go to state 85
    divide        go to state 86
    modulus       go to state 87
    exponentiate  go to state 88
    comma         go to state 133


state 91

   51 primary_expr: left_brace not_empty_expr_list . right_brace

    TOKEN_RIGHT_BRACE  shift, and go to state 134

    right_brace  go to state 135


state 92

   19 expr: expr . add expr
   20     | expr . subtract expr
   21     | expr . multiply expr
   22     | expr . divide expr
   23     | expr . eq expr
   24     | expr . ne expr
   25     | expr . gt expr
   26     | expr . ge expr
   27     | expr . lt expr
   28     | expr . le expr
   29     | expr . and expr
   30     | expr . or expr
   32     | expr . increment
   33     | expr . decrement
   34     | expr . modulus expr
   35     | expr . exponentiate expr
   50 primary_expr: left_paren expr . right_paren

    TOKEN_RIGHT_PAREN   shift, and go to state 136
    TOKEN_GE            shift, and go to state 59
    TOKEN_LE            shift, and go to state 60
    TOKEN_EQ            shift, and go to state 25
    TOKEN_NE            shift, and go to state 61
    TOKEN_LT            shift, and go to state 62
    TOKEN_GT            shift, and go to state 63
    TOKEN_AND           shift, and go to state 64
    TOKEN_OR            shift, and go to state 65
    TOKEN_INCREMENT     shift, and go to state 66
    TOKEN_DECREMENT     shift, and go to state 67
    TOKEN_ADD           shift, and go to state 68
    TOKEN_SUBTRACT      shift, and go to state 37
    TOKEN_MULTIPLY      shift, and go to state 69
    TOKEN_DIVIDE        shift, and go to state 70
    TOKEN_MODULUS       shift, and go to state 71
    TOKEN_EXPONENTIATE  shift, and go to state 72

    right_paren   go to state 137
    ge            go to state 73
    le            go to state 74
    eq            go to state 75
    ne            go to state 76
    lt            go to state 77
    gt            go to state 78
    and           go to state 79
    or            go to state 80
    increment     go to state 81
    decrement     go to state 82
    add           go to state 83
    subtract      go to state 84
    multiply      go to state 85
    divide        go to state 86
    modulus       go to state 87
    exponentiate  go to state 88


state 93

   19 expr: expr . add expr
   20     | expr . subtract expr
   21     | expr . multiply expr
   22     | expr . divide expr
   23     | expr . eq expr
   24     | expr . ne expr
   25     | expr . gt expr
   26     | expr . ge expr
   27     | expr . lt expr
   28     | expr . le expr
   29     | expr . and expr
   30     | expr . or expr
   31     | not expr .
   32     | expr . increment
   33     | expr . decrement
   34     | expr . modulus expr
   35     | expr . exponentiate expr

    TOKEN_GE            shift, and go to state 59
    TOKEN_LE            shift, and go to state 60
    TOKEN_EQ            shift, and go to state 25
    TOKEN_NE            shift, and go to state 61
    TOKEN_LT            shift, and go to state 62
    TOKEN_GT            shift, and go to state 63
    TOKEN_AND           shift, and go to state 64
    TOKEN_OR            shift, and go to state 65
    TOKEN_INCREMENT     shift, and go to state 66
    TOKEN_DECREMENT     shift, and go to state 67
    TOKEN_ADD           shift, and go to state 68
    TOKEN_SUBTRACT      shift, and go to state 37
    TOKEN_MULTIPLY      shift, and go to state 69
    TOKEN_DIVIDE        shift, and go to state 70
    TOKEN_MODULUS       shift, and go to state 71
    TOKEN_EXPONENTIATE  shift, and go to state 72

    TOKEN_GE            [reduce using rule 31 (expr)]
    TOKEN_LE            [reduce using rule 31 (expr)]
    TOKEN_EQ            [reduce using rule 31 (expr)]
    TOKEN_NE            [reduce using rule 31 (expr)]
    TOKEN_LT            [reduce using rule 31 (expr)]
    TOKEN_GT            [reduce using rule 31 (expr)]
    TOKEN_AND           [reduce using rule 31 (expr)]
    TOKEN_OR            [reduce using rule 31 (expr)]
    TOKEN_INCREMENT     [reduce using rule 31 (expr)]
    TOKEN_DECREMENT     [reduce using rule 31 (expr)]
    TOKEN_ADD           [reduce using rule 31 (expr)]
    TOKEN_SUBTRACT      [reduce using rule 31 (expr)]
    TOKEN_MULTIPLY      [reduce using rule 31 (expr)]
    TOKEN_DIVIDE        [reduce using rule 31 (expr)]
    TOKEN_MODULUS       [reduce using rule 31 (expr)]
    TOKEN_EXPONENTIATE  [reduce using rule 31 (expr)]
    $default            reduce using rule 31 (expr)

    ge            go to state 73
    le            go to state 74
    eq            go to state 75
    ne            go to state 76
    lt            go to state 77
    gt            go to state 78
    and           go to state 79
    or            go to state 80
    increment     go to state 81
    decrement     go to state 82
    add           go to state 83
    subtract      go to state 84
    multiply      go to state 85
    divide        go to state 86
    modulus       go to state 87
    exponentiate  go to state 88


state 94

   53 primary_expr: subtract left_paren . expr right_paren

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    expr             go to state 138
    primary_expr     go to state 44
    left_brace       go to state 45
    left_paren       go to state 46
    not              go to state 47
    subtract         go to state 48
    true             go to state 49
    false            go to state 50
    char_literal     go to state 51
    integer_literal  go to state 52
    string_literal   go to state 53
    identifier       go to state 54


state 95

   52 primary_expr: subtract integer_literal .

    $default  reduce using rule 52 (primary_expr)


state 96

   44 primary_expr: identifier left_paren . expr_list right_paren

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    $default  reduce using rule 40 (expr_list)

    expr                 go to state 90
    expr_list            go to state 139
    not_empty_expr_list  go to state 140
    primary_expr         go to state 44
    left_brace           go to state 45
    left_paren           go to state 46
    not                  go to state 47
    subtract             go to state 48
    true                 go to state 49
    false                go to state 50
    char_literal         go to state 51
    integer_literal      go to state 52
    string_literal       go to state 53
    identifier           go to state 54


state 97

   66 print: TOKEN_PRINT .

    $default  reduce using rule 66 (print)


state 98

   68 for: TOKEN_FOR .

    $default  reduce using rule 68 (for)


state 99

   69 if: TOKEN_IF .

    $default  reduce using rule 69 (if)


state 100

   71 return: TOKEN_RETURN .

    $default  reduce using rule 71 (return)


state 101

    7 stmt: decl .

    $default  reduce using rule 7 (stmt)


state 102

   17 not_empty_stmt_list: stmt . not_empty_stmt_list
   18                    | stmt .

    TOKEN_PRINT            shift, and go to state 97
    TOKEN_FOR              shift, and go to state 98
    TOKEN_IF               shift, and go to state 99
    TOKEN_RETURN           shift, and go to state 100
    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    $default  reduce using rule 18 (not_empty_stmt_list)

    decl                 go to state 101
    stmt                 go to state 102
    not_empty_stmt_list  go to state 141
    expr                 go to state 105
    primary_expr         go to state 44
    print                go to state 106
    for                  go to state 107
    if                   go to state 108
    return               go to state 109
    left_brace           go to state 110
    left_paren           go to state 46
    not                  go to state 47
    subtract             go to state 48
    true                 go to state 49
    false                go to state 50
    char_literal         go to state 51
    integer_literal      go to state 52
    string_literal       go to state 53
    identifier           go to state 111


state 103

    6 decl: identifier colon type assign left_brace stmt_list . right_brace

    TOKEN_RIGHT_BRACE  shift, and go to state 134

    right_brace  go to state 142


state 104

   15 stmt_list: not_empty_stmt_list .

    $default  reduce using rule 15 (stmt_list)


state 105

    8 stmt: expr . semicolon
   19 expr: expr . add expr
   20     | expr . subtract expr
   21     | expr . multiply expr
   22     | expr . divide expr
   23     | expr . eq expr
   24     | expr . ne expr
   25     | expr . gt expr
   26     | expr . ge expr
   27     | expr . lt expr
   28     | expr . le expr
   29     | expr . and expr
   30     | expr . or expr
   32     | expr . increment
   33     | expr . decrement
   34     | expr . modulus expr
   35     | expr . exponentiate expr

    TOKEN_GE            shift, and go to state 59
    TOKEN_LE            shift, and go to state 60
    TOKEN_EQ            shift, and go to state 25
    TOKEN_NE            shift, and go to state 61
    TOKEN_LT            shift, and go to state 62
    TOKEN_GT            shift, and go to state 63
    TOKEN_AND           shift, and go to state 64
    TOKEN_OR            shift, and go to state 65
    TOKEN_INCREMENT     shift, and go to state 66
    TOKEN_DECREMENT     shift, and go to state 67
    TOKEN_ADD           shift, and go to state 68
    TOKEN_SUBTRACT      shift, and go to state 37
    TOKEN_MULTIPLY      shift, and go to state 69
    TOKEN_DIVIDE        shift, and go to state 70
    TOKEN_MODULUS       shift, and go to state 71
    TOKEN_EXPONENTIATE  shift, and go to state 72
    TOKEN_SEMICOLON     shift, and go to state 27

    ge            go to state 73
    le            go to state 74
    eq            go to state 75
    ne            go to state 76
    lt            go to state 77
    gt            go to state 78
    and           go to state 79
    or            go to state 80
    increment     go to state 81
    decrement     go to state 82
    add           go to state 83
    subtract      go to state 84
    multiply      go to state 85
    divide        go to state 86
    modulus       go to state 87
    exponentiate  go to state 88
    semicolon     go to state 143


state 106

   10 stmt: print . expr_list semicolon

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    $default  reduce using rule 40 (expr_list)

    expr                 go to state 90
    expr_list            go to state 144
    not_empty_expr_list  go to state 140
    primary_expr         go to state 44
    left_brace           go to state 45
    left_paren           go to state 46
    not                  go to state 47
    subtract             go to state 48
    true                 go to state 49
    false                go to state 50
    char_literal         go to state 51
    integer_literal      go to state 52
    string_literal       go to state 53
    identifier           go to state 54


state 107

   11 stmt: for . left_paren opt_expr semicolon opt_expr semicolon opt_expr right_paren stmt

    TOKEN_LEFT_PAREN  shift, and go to state 35

    left_paren  go to state 145


state 108

   12 stmt: if . expr stmt
   13     | if . expr stmt else stmt

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    expr             go to state 146
    primary_expr     go to state 44
    left_brace       go to state 45
    left_paren       go to state 46
    not              go to state 47
    subtract         go to state 48
    true             go to state 49
    false            go to state 50
    char_literal     go to state 51
    integer_literal  go to state 52
    string_literal   go to state 53
    identifier       go to state 54


state 109

    9 stmt: return . opt_expr semicolon

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    $default  reduce using rule 38 (opt_expr)

    expr             go to state 57
    opt_expr         go to state 147
    primary_expr     go to state 44
    left_brace       go to state 45
    left_paren       go to state 46
    not              go to state 47
    subtract         go to state 48
    true             go to state 49
    false            go to state 50
    char_literal     go to state 51
    integer_literal  go to state 52
    string_literal   go to state 53
    identifier       go to state 54


state 110

   14 stmt: left_brace . stmt_list right_brace
   51 primary_expr: left_brace . not_empty_expr_list right_brace

    TOKEN_PRINT            shift, and go to state 97
    TOKEN_FOR              shift, and go to state 98
    TOKEN_IF               shift, and go to state 99
    TOKEN_RETURN           shift, and go to state 100
    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    $default  reduce using rule 16 (stmt_list)

    decl                 go to state 101
    stmt                 go to state 102
    stmt_list            go to state 148
    not_empty_stmt_list  go to state 104
    expr                 go to state 149
    not_empty_expr_list  go to state 91
    primary_expr         go to state 44
    print                go to state 106
    for                  go to state 107
    if                   go to state 108
    return               go to state 109
    left_brace           go to state 110
    left_paren           go to state 46
    not                  go to state 47
    subtract             go to state 48
    true                 go to state 49
    false                go to state 50
    char_literal         go to state 51
    integer_literal      go to state 52
    string_literal       go to state 53
    identifier           go to state 111


state 111

    4 decl: identifier . colon type eq expr semicolon
    5     | identifier . colon type semicolon
    6     | identifier . colon type assign left_brace stmt_list right_brace
   43 primary_expr: identifier .
   44             | identifier . left_paren expr_list right_paren

    TOKEN_LEFT_PAREN  shift, and go to state 35
    TOKEN_COLON       shift, and go to state 8

    $default  reduce using rule 43 (primary_expr)

    left_paren  go to state 96
    colon       go to state 9


state 112

   60 type: function type left_paren param_list . right_paren

    TOKEN_RIGHT_PAREN  shift, and go to state 136

    right_paren  go to state 150


state 113

   61 param_list: not_empty_param_list .

    $default  reduce using rule 61 (param_list)


state 114

   63 not_empty_param_list: param .
   64                     | param . comma not_empty_param_list

    TOKEN_COMMA  shift, and go to state 132

    $default  reduce using rule 63 (not_empty_param_list)

    comma  go to state 151


state 115

   65 param: identifier .

    $default  reduce using rule 65 (param)


state 116

   77 right_bracket: TOKEN_RIGHT_BRACKET .

    $default  reduce using rule 77 (right_bracket)


state 117

   59 type: array left_bracket opt_expr right_bracket . type

    TOKEN_FUNCTION  shift, and go to state 10
    TOKEN_STRING    shift, and go to state 11
    TOKEN_INTEGER   shift, and go to state 12
    TOKEN_CHAR      shift, and go to state 13
    TOKEN_VOID      shift, and go to state 14
    TOKEN_BOOLEAN   shift, and go to state 15
    TOKEN_ARRAY     shift, and go to state 16

    type      go to state 152
    function  go to state 18
    string    go to state 19
    integer   go to state 20
    char      go to state 21
    void      go to state 22
    boolean   go to state 23
    array     go to state 24


state 118

   19 expr: expr . add expr
   20     | expr . subtract expr
   21     | expr . multiply expr
   22     | expr . divide expr
   23     | expr . eq expr
   24     | expr . ne expr
   25     | expr . gt expr
   26     | expr . ge expr
   26     | expr ge expr .
   27     | expr . lt expr
   28     | expr . le expr
   29     | expr . and expr
   30     | expr . or expr
   32     | expr . increment
   33     | expr . decrement
   34     | expr . modulus expr
   35     | expr . exponentiate expr

    TOKEN_GE            shift, and go to state 59
    TOKEN_LE            shift, and go to state 60
    TOKEN_EQ            shift, and go to state 25
    TOKEN_NE            shift, and go to state 61
    TOKEN_LT            shift, and go to state 62
    TOKEN_GT            shift, and go to state 63
    TOKEN_AND           shift, and go to state 64
    TOKEN_OR            shift, and go to state 65
    TOKEN_INCREMENT     shift, and go to state 66
    TOKEN_DECREMENT     shift, and go to state 67
    TOKEN_ADD           shift, and go to state 68
    TOKEN_SUBTRACT      shift, and go to state 37
    TOKEN_MULTIPLY      shift, and go to state 69
    TOKEN_DIVIDE        shift, and go to state 70
    TOKEN_MODULUS       shift, and go to state 71
    TOKEN_EXPONENTIATE  shift, and go to state 72

    TOKEN_GE            [reduce using rule 26 (expr)]
    TOKEN_LE            [reduce using rule 26 (expr)]
    TOKEN_EQ            [reduce using rule 26 (expr)]
    TOKEN_NE            [reduce using rule 26 (expr)]
    TOKEN_LT            [reduce using rule 26 (expr)]
    TOKEN_GT            [reduce using rule 26 (expr)]
    TOKEN_AND           [reduce using rule 26 (expr)]
    TOKEN_OR            [reduce using rule 26 (expr)]
    TOKEN_INCREMENT     [reduce using rule 26 (expr)]
    TOKEN_DECREMENT     [reduce using rule 26 (expr)]
    TOKEN_ADD           [reduce using rule 26 (expr)]
    TOKEN_SUBTRACT      [reduce using rule 26 (expr)]
    TOKEN_MULTIPLY      [reduce using rule 26 (expr)]
    TOKEN_DIVIDE        [reduce using rule 26 (expr)]
    TOKEN_MODULUS       [reduce using rule 26 (expr)]
    TOKEN_EXPONENTIATE  [reduce using rule 26 (expr)]
    $default            reduce using rule 26 (expr)

    ge            go to state 73
    le            go to state 74
    eq            go to state 75
    ne            go to state 76
    lt            go to state 77
    gt            go to state 78
    and           go to state 79
    or            go to state 80
    increment     go to state 81
    decrement     go to state 82
    add           go to state 83
    subtract      go to state 84
    multiply      go to state 85
    divide        go to state 86
    modulus       go to state 87
    exponentiate  go to state 88


state 119

   19 expr: expr . add expr
   20     | expr . subtract expr
   21     | expr . multiply expr
   22     | expr . divide expr
   23     | expr . eq expr
   24     | expr . ne expr
   25     | expr . gt expr
   26     | expr . ge expr
   27     | expr . lt expr
   28     | expr . le expr
   28     | expr le expr .
   29     | expr . and expr
   30     | expr . or expr
   32     | expr . increment
   33     | expr . decrement
   34     | expr . modulus expr
   35     | expr . exponentiate expr

    TOKEN_GE            shift, and go to state 59
    TOKEN_LE            shift, and go to state 60
    TOKEN_EQ            shift, and go to state 25
    TOKEN_NE            shift, and go to state 61
    TOKEN_LT            shift, and go to state 62
    TOKEN_GT            shift, and go to state 63
    TOKEN_AND           shift, and go to state 64
    TOKEN_OR            shift, and go to state 65
    TOKEN_INCREMENT     shift, and go to state 66
    TOKEN_DECREMENT     shift, and go to state 67
    TOKEN_ADD           shift, and go to state 68
    TOKEN_SUBTRACT      shift, and go to state 37
    TOKEN_MULTIPLY      shift, and go to state 69
    TOKEN_DIVIDE        shift, and go to state 70
    TOKEN_MODULUS       shift, and go to state 71
    TOKEN_EXPONENTIATE  shift, and go to state 72

    TOKEN_GE            [reduce using rule 28 (expr)]
    TOKEN_LE            [reduce using rule 28 (expr)]
    TOKEN_EQ            [reduce using rule 28 (expr)]
    TOKEN_NE            [reduce using rule 28 (expr)]
    TOKEN_LT            [reduce using rule 28 (expr)]
    TOKEN_GT            [reduce using rule 28 (expr)]
    TOKEN_AND           [reduce using rule 28 (expr)]
    TOKEN_OR            [reduce using rule 28 (expr)]
    TOKEN_INCREMENT     [reduce using rule 28 (expr)]
    TOKEN_DECREMENT     [reduce using rule 28 (expr)]
    TOKEN_ADD           [reduce using rule 28 (expr)]
    TOKEN_SUBTRACT      [reduce using rule 28 (expr)]
    TOKEN_MULTIPLY      [reduce using rule 28 (expr)]
    TOKEN_DIVIDE        [reduce using rule 28 (expr)]
    TOKEN_MODULUS       [reduce using rule 28 (expr)]
    TOKEN_EXPONENTIATE  [reduce using rule 28 (expr)]
    $default            reduce using rule 28 (expr)

    ge            go to state 73
    le            go to state 74
    eq            go to state 75
    ne            go to state 76
    lt            go to state 77
    gt            go to state 78
    and           go to state 79
    or            go to state 80
    increment     go to state 81
    decrement     go to state 82
    add           go to state 83
    subtract      go to state 84
    multiply      go to state 85
    divide        go to state 86
    modulus       go to state 87
    exponentiate  go to state 88


state 120

   19 expr: expr . add expr
   20     | expr . subtract expr
   21     | expr . multiply expr
   22     | expr . divide expr
   23     | expr . eq expr
   23     | expr eq expr .
   24     | expr . ne expr
   25     | expr . gt expr
   26     | expr . ge expr
   27     | expr . lt expr
   28     | expr . le expr
   29     | expr . and expr
   30     | expr . or expr
   32     | expr . increment
   33     | expr . decrement
   34     | expr . modulus expr
   35     | expr . exponentiate expr

    TOKEN_GE            shift, and go to state 59
    TOKEN_LE            shift, and go to state 60
    TOKEN_EQ            shift, and go to state 25
    TOKEN_NE            shift, and go to state 61
    TOKEN_LT            shift, and go to state 62
    TOKEN_GT            shift, and go to state 63
    TOKEN_AND           shift, and go to state 64
    TOKEN_OR            shift, and go to state 65
    TOKEN_INCREMENT     shift, and go to state 66
    TOKEN_DECREMENT     shift, and go to state 67
    TOKEN_ADD           shift, and go to state 68
    TOKEN_SUBTRACT      shift, and go to state 37
    TOKEN_MULTIPLY      shift, and go to state 69
    TOKEN_DIVIDE        shift, and go to state 70
    TOKEN_MODULUS       shift, and go to state 71
    TOKEN_EXPONENTIATE  shift, and go to state 72

    TOKEN_GE            [reduce using rule 23 (expr)]
    TOKEN_LE            [reduce using rule 23 (expr)]
    TOKEN_EQ            [reduce using rule 23 (expr)]
    TOKEN_NE            [reduce using rule 23 (expr)]
    TOKEN_LT            [reduce using rule 23 (expr)]
    TOKEN_GT            [reduce using rule 23 (expr)]
    TOKEN_AND           [reduce using rule 23 (expr)]
    TOKEN_OR            [reduce using rule 23 (expr)]
    TOKEN_INCREMENT     [reduce using rule 23 (expr)]
    TOKEN_DECREMENT     [reduce using rule 23 (expr)]
    TOKEN_ADD           [reduce using rule 23 (expr)]
    TOKEN_SUBTRACT      [reduce using rule 23 (expr)]
    TOKEN_MULTIPLY      [reduce using rule 23 (expr)]
    TOKEN_DIVIDE        [reduce using rule 23 (expr)]
    TOKEN_MODULUS       [reduce using rule 23 (expr)]
    TOKEN_EXPONENTIATE  [reduce using rule 23 (expr)]
    $default            reduce using rule 23 (expr)

    ge            go to state 73
    le            go to state 74
    eq            go to state 75
    ne            go to state 76
    lt            go to state 77
    gt            go to state 78
    and           go to state 79
    or            go to state 80
    increment     go to state 81
    decrement     go to state 82
    add           go to state 83
    subtract      go to state 84
    multiply      go to state 85
    divide        go to state 86
    modulus       go to state 87
    exponentiate  go to state 88


state 121

   19 expr: expr . add expr
   20     | expr . subtract expr
   21     | expr . multiply expr
   22     | expr . divide expr
   23     | expr . eq expr
   24     | expr . ne expr
   24     | expr ne expr .
   25     | expr . gt expr
   26     | expr . ge expr
   27     | expr . lt expr
   28     | expr . le expr
   29     | expr . and expr
   30     | expr . or expr
   32     | expr . increment
   33     | expr . decrement
   34     | expr . modulus expr
   35     | expr . exponentiate expr

    TOKEN_GE            shift, and go to state 59
    TOKEN_LE            shift, and go to state 60
    TOKEN_EQ            shift, and go to state 25
    TOKEN_NE            shift, and go to state 61
    TOKEN_LT            shift, and go to state 62
    TOKEN_GT            shift, and go to state 63
    TOKEN_AND           shift, and go to state 64
    TOKEN_OR            shift, and go to state 65
    TOKEN_INCREMENT     shift, and go to state 66
    TOKEN_DECREMENT     shift, and go to state 67
    TOKEN_ADD           shift, and go to state 68
    TOKEN_SUBTRACT      shift, and go to state 37
    TOKEN_MULTIPLY      shift, and go to state 69
    TOKEN_DIVIDE        shift, and go to state 70
    TOKEN_MODULUS       shift, and go to state 71
    TOKEN_EXPONENTIATE  shift, and go to state 72

    TOKEN_GE            [reduce using rule 24 (expr)]
    TOKEN_LE            [reduce using rule 24 (expr)]
    TOKEN_EQ            [reduce using rule 24 (expr)]
    TOKEN_NE            [reduce using rule 24 (expr)]
    TOKEN_LT            [reduce using rule 24 (expr)]
    TOKEN_GT            [reduce using rule 24 (expr)]
    TOKEN_AND           [reduce using rule 24 (expr)]
    TOKEN_OR            [reduce using rule 24 (expr)]
    TOKEN_INCREMENT     [reduce using rule 24 (expr)]
    TOKEN_DECREMENT     [reduce using rule 24 (expr)]
    TOKEN_ADD           [reduce using rule 24 (expr)]
    TOKEN_SUBTRACT      [reduce using rule 24 (expr)]
    TOKEN_MULTIPLY      [reduce using rule 24 (expr)]
    TOKEN_DIVIDE        [reduce using rule 24 (expr)]
    TOKEN_MODULUS       [reduce using rule 24 (expr)]
    TOKEN_EXPONENTIATE  [reduce using rule 24 (expr)]
    $default            reduce using rule 24 (expr)

    ge            go to state 73
    le            go to state 74
    eq            go to state 75
    ne            go to state 76
    lt            go to state 77
    gt            go to state 78
    and           go to state 79
    or            go to state 80
    increment     go to state 81
    decrement     go to state 82
    add           go to state 83
    subtract      go to state 84
    multiply      go to state 85
    divide        go to state 86
    modulus       go to state 87
    exponentiate  go to state 88


state 122

   19 expr: expr . add expr
   20     | expr . subtract expr
   21     | expr . multiply expr
   22     | expr . divide expr
   23     | expr . eq expr
   24     | expr . ne expr
   25     | expr . gt expr
   26     | expr . ge expr
   27     | expr . lt expr
   27     | expr lt expr .
   28     | expr . le expr
   29     | expr . and expr
   30     | expr . or expr
   32     | expr . increment
   33     | expr . decrement
   34     | expr . modulus expr
   35     | expr . exponentiate expr

    TOKEN_GE            shift, and go to state 59
    TOKEN_LE            shift, and go to state 60
    TOKEN_EQ            shift, and go to state 25
    TOKEN_NE            shift, and go to state 61
    TOKEN_LT            shift, and go to state 62
    TOKEN_GT            shift, and go to state 63
    TOKEN_AND           shift, and go to state 64
    TOKEN_OR            shift, and go to state 65
    TOKEN_INCREMENT     shift, and go to state 66
    TOKEN_DECREMENT     shift, and go to state 67
    TOKEN_ADD           shift, and go to state 68
    TOKEN_SUBTRACT      shift, and go to state 37
    TOKEN_MULTIPLY      shift, and go to state 69
    TOKEN_DIVIDE        shift, and go to state 70
    TOKEN_MODULUS       shift, and go to state 71
    TOKEN_EXPONENTIATE  shift, and go to state 72

    TOKEN_GE            [reduce using rule 27 (expr)]
    TOKEN_LE            [reduce using rule 27 (expr)]
    TOKEN_EQ            [reduce using rule 27 (expr)]
    TOKEN_NE            [reduce using rule 27 (expr)]
    TOKEN_LT            [reduce using rule 27 (expr)]
    TOKEN_GT            [reduce using rule 27 (expr)]
    TOKEN_AND           [reduce using rule 27 (expr)]
    TOKEN_OR            [reduce using rule 27 (expr)]
    TOKEN_INCREMENT     [reduce using rule 27 (expr)]
    TOKEN_DECREMENT     [reduce using rule 27 (expr)]
    TOKEN_ADD           [reduce using rule 27 (expr)]
    TOKEN_SUBTRACT      [reduce using rule 27 (expr)]
    TOKEN_MULTIPLY      [reduce using rule 27 (expr)]
    TOKEN_DIVIDE        [reduce using rule 27 (expr)]
    TOKEN_MODULUS       [reduce using rule 27 (expr)]
    TOKEN_EXPONENTIATE  [reduce using rule 27 (expr)]
    $default            reduce using rule 27 (expr)

    ge            go to state 73
    le            go to state 74
    eq            go to state 75
    ne            go to state 76
    lt            go to state 77
    gt            go to state 78
    and           go to state 79
    or            go to state 80
    increment     go to state 81
    decrement     go to state 82
    add           go to state 83
    subtract      go to state 84
    multiply      go to state 85
    divide        go to state 86
    modulus       go to state 87
    exponentiate  go to state 88


state 123

   19 expr: expr . add expr
   20     | expr . subtract expr
   21     | expr . multiply expr
   22     | expr . divide expr
   23     | expr . eq expr
   24     | expr . ne expr
   25     | expr . gt expr
   25     | expr gt expr .
   26     | expr . ge expr
   27     | expr . lt expr
   28     | expr . le expr
   29     | expr . and expr
   30     | expr . or expr
   32     | expr . increment
   33     | expr . decrement
   34     | expr . modulus expr
   35     | expr . exponentiate expr

    TOKEN_GE            shift, and go to state 59
    TOKEN_LE            shift, and go to state 60
    TOKEN_EQ            shift, and go to state 25
    TOKEN_NE            shift, and go to state 61
    TOKEN_LT            shift, and go to state 62
    TOKEN_GT            shift, and go to state 63
    TOKEN_AND           shift, and go to state 64
    TOKEN_OR            shift, and go to state 65
    TOKEN_INCREMENT     shift, and go to state 66
    TOKEN_DECREMENT     shift, and go to state 67
    TOKEN_ADD           shift, and go to state 68
    TOKEN_SUBTRACT      shift, and go to state 37
    TOKEN_MULTIPLY      shift, and go to state 69
    TOKEN_DIVIDE        shift, and go to state 70
    TOKEN_MODULUS       shift, and go to state 71
    TOKEN_EXPONENTIATE  shift, and go to state 72

    TOKEN_GE            [reduce using rule 25 (expr)]
    TOKEN_LE            [reduce using rule 25 (expr)]
    TOKEN_EQ            [reduce using rule 25 (expr)]
    TOKEN_NE            [reduce using rule 25 (expr)]
    TOKEN_LT            [reduce using rule 25 (expr)]
    TOKEN_GT            [reduce using rule 25 (expr)]
    TOKEN_AND           [reduce using rule 25 (expr)]
    TOKEN_OR            [reduce using rule 25 (expr)]
    TOKEN_INCREMENT     [reduce using rule 25 (expr)]
    TOKEN_DECREMENT     [reduce using rule 25 (expr)]
    TOKEN_ADD           [reduce using rule 25 (expr)]
    TOKEN_SUBTRACT      [reduce using rule 25 (expr)]
    TOKEN_MULTIPLY      [reduce using rule 25 (expr)]
    TOKEN_DIVIDE        [reduce using rule 25 (expr)]
    TOKEN_MODULUS       [reduce using rule 25 (expr)]
    TOKEN_EXPONENTIATE  [reduce using rule 25 (expr)]
    $default            reduce using rule 25 (expr)

    ge            go to state 73
    le            go to state 74
    eq            go to state 75
    ne            go to state 76
    lt            go to state 77
    gt            go to state 78
    and           go to state 79
    or            go to state 80
    increment     go to state 81
    decrement     go to state 82
    add           go to state 83
    subtract      go to state 84
    multiply      go to state 85
    divide        go to state 86
    modulus       go to state 87
    exponentiate  go to state 88


state 124

   19 expr: expr . add expr
   20     | expr . subtract expr
   21     | expr . multiply expr
   22     | expr . divide expr
   23     | expr . eq expr
   24     | expr . ne expr
   25     | expr . gt expr
   26     | expr . ge expr
   27     | expr . lt expr
   28     | expr . le expr
   29     | expr . and expr
   29     | expr and expr .
   30     | expr . or expr
   32     | expr . increment
   33     | expr . decrement
   34     | expr . modulus expr
   35     | expr . exponentiate expr

    TOKEN_GE            shift, and go to state 59
    TOKEN_LE            shift, and go to state 60
    TOKEN_EQ            shift, and go to state 25
    TOKEN_NE            shift, and go to state 61
    TOKEN_LT            shift, and go to state 62
    TOKEN_GT            shift, and go to state 63
    TOKEN_AND           shift, and go to state 64
    TOKEN_OR            shift, and go to state 65
    TOKEN_INCREMENT     shift, and go to state 66
    TOKEN_DECREMENT     shift, and go to state 67
    TOKEN_ADD           shift, and go to state 68
    TOKEN_SUBTRACT      shift, and go to state 37
    TOKEN_MULTIPLY      shift, and go to state 69
    TOKEN_DIVIDE        shift, and go to state 70
    TOKEN_MODULUS       shift, and go to state 71
    TOKEN_EXPONENTIATE  shift, and go to state 72

    TOKEN_GE            [reduce using rule 29 (expr)]
    TOKEN_LE            [reduce using rule 29 (expr)]
    TOKEN_EQ            [reduce using rule 29 (expr)]
    TOKEN_NE            [reduce using rule 29 (expr)]
    TOKEN_LT            [reduce using rule 29 (expr)]
    TOKEN_GT            [reduce using rule 29 (expr)]
    TOKEN_AND           [reduce using rule 29 (expr)]
    TOKEN_OR            [reduce using rule 29 (expr)]
    TOKEN_INCREMENT     [reduce using rule 29 (expr)]
    TOKEN_DECREMENT     [reduce using rule 29 (expr)]
    TOKEN_ADD           [reduce using rule 29 (expr)]
    TOKEN_SUBTRACT      [reduce using rule 29 (expr)]
    TOKEN_MULTIPLY      [reduce using rule 29 (expr)]
    TOKEN_DIVIDE        [reduce using rule 29 (expr)]
    TOKEN_MODULUS       [reduce using rule 29 (expr)]
    TOKEN_EXPONENTIATE  [reduce using rule 29 (expr)]
    $default            reduce using rule 29 (expr)

    ge            go to state 73
    le            go to state 74
    eq            go to state 75
    ne            go to state 76
    lt            go to state 77
    gt            go to state 78
    and           go to state 79
    or            go to state 80
    increment     go to state 81
    decrement     go to state 82
    add           go to state 83
    subtract      go to state 84
    multiply      go to state 85
    divide        go to state 86
    modulus       go to state 87
    exponentiate  go to state 88


state 125

   19 expr: expr . add expr
   20     | expr . subtract expr
   21     | expr . multiply expr
   22     | expr . divide expr
   23     | expr . eq expr
   24     | expr . ne expr
   25     | expr . gt expr
   26     | expr . ge expr
   27     | expr . lt expr
   28     | expr . le expr
   29     | expr . and expr
   30     | expr . or expr
   30     | expr or expr .
   32     | expr . increment
   33     | expr . decrement
   34     | expr . modulus expr
   35     | expr . exponentiate expr

    TOKEN_GE            shift, and go to state 59
    TOKEN_LE            shift, and go to state 60
    TOKEN_EQ            shift, and go to state 25
    TOKEN_NE            shift, and go to state 61
    TOKEN_LT            shift, and go to state 62
    TOKEN_GT            shift, and go to state 63
    TOKEN_AND           shift, and go to state 64
    TOKEN_OR            shift, and go to state 65
    TOKEN_INCREMENT     shift, and go to state 66
    TOKEN_DECREMENT     shift, and go to state 67
    TOKEN_ADD           shift, and go to state 68
    TOKEN_SUBTRACT      shift, and go to state 37
    TOKEN_MULTIPLY      shift, and go to state 69
    TOKEN_DIVIDE        shift, and go to state 70
    TOKEN_MODULUS       shift, and go to state 71
    TOKEN_EXPONENTIATE  shift, and go to state 72

    TOKEN_GE            [reduce using rule 30 (expr)]
    TOKEN_LE            [reduce using rule 30 (expr)]
    TOKEN_EQ            [reduce using rule 30 (expr)]
    TOKEN_NE            [reduce using rule 30 (expr)]
    TOKEN_LT            [reduce using rule 30 (expr)]
    TOKEN_GT            [reduce using rule 30 (expr)]
    TOKEN_AND           [reduce using rule 30 (expr)]
    TOKEN_OR            [reduce using rule 30 (expr)]
    TOKEN_INCREMENT     [reduce using rule 30 (expr)]
    TOKEN_DECREMENT     [reduce using rule 30 (expr)]
    TOKEN_ADD           [reduce using rule 30 (expr)]
    TOKEN_SUBTRACT      [reduce using rule 30 (expr)]
    TOKEN_MULTIPLY      [reduce using rule 30 (expr)]
    TOKEN_DIVIDE        [reduce using rule 30 (expr)]
    TOKEN_MODULUS       [reduce using rule 30 (expr)]
    TOKEN_EXPONENTIATE  [reduce using rule 30 (expr)]
    $default            reduce using rule 30 (expr)

    ge            go to state 73
    le            go to state 74
    eq            go to state 75
    ne            go to state 76
    lt            go to state 77
    gt            go to state 78
    and           go to state 79
    or            go to state 80
    increment     go to state 81
    decrement     go to state 82
    add           go to state 83
    subtract      go to state 84
    multiply      go to state 85
    divide        go to state 86
    modulus       go to state 87
    exponentiate  go to state 88


state 126

   19 expr: expr . add expr
   19     | expr add expr .
   20     | expr . subtract expr
   21     | expr . multiply expr
   22     | expr . divide expr
   23     | expr . eq expr
   24     | expr . ne expr
   25     | expr . gt expr
   26     | expr . ge expr
   27     | expr . lt expr
   28     | expr . le expr
   29     | expr . and expr
   30     | expr . or expr
   32     | expr . increment
   33     | expr . decrement
   34     | expr . modulus expr
   35     | expr . exponentiate expr

    TOKEN_GE            shift, and go to state 59
    TOKEN_LE            shift, and go to state 60
    TOKEN_EQ            shift, and go to state 25
    TOKEN_NE            shift, and go to state 61
    TOKEN_LT            shift, and go to state 62
    TOKEN_GT            shift, and go to state 63
    TOKEN_AND           shift, and go to state 64
    TOKEN_OR            shift, and go to state 65
    TOKEN_INCREMENT     shift, and go to state 66
    TOKEN_DECREMENT     shift, and go to state 67
    TOKEN_ADD           shift, and go to state 68
    TOKEN_SUBTRACT      shift, and go to state 37
    TOKEN_MULTIPLY      shift, and go to state 69
    TOKEN_DIVIDE        shift, and go to state 70
    TOKEN_MODULUS       shift, and go to state 71
    TOKEN_EXPONENTIATE  shift, and go to state 72

    TOKEN_GE            [reduce using rule 19 (expr)]
    TOKEN_LE            [reduce using rule 19 (expr)]
    TOKEN_EQ            [reduce using rule 19 (expr)]
    TOKEN_NE            [reduce using rule 19 (expr)]
    TOKEN_LT            [reduce using rule 19 (expr)]
    TOKEN_GT            [reduce using rule 19 (expr)]
    TOKEN_AND           [reduce using rule 19 (expr)]
    TOKEN_OR            [reduce using rule 19 (expr)]
    TOKEN_INCREMENT     [reduce using rule 19 (expr)]
    TOKEN_DECREMENT     [reduce using rule 19 (expr)]
    TOKEN_ADD           [reduce using rule 19 (expr)]
    TOKEN_SUBTRACT      [reduce using rule 19 (expr)]
    TOKEN_MULTIPLY      [reduce using rule 19 (expr)]
    TOKEN_DIVIDE        [reduce using rule 19 (expr)]
    TOKEN_MODULUS       [reduce using rule 19 (expr)]
    TOKEN_EXPONENTIATE  [reduce using rule 19 (expr)]
    $default            reduce using rule 19 (expr)

    ge            go to state 73
    le            go to state 74
    eq            go to state 75
    ne            go to state 76
    lt            go to state 77
    gt            go to state 78
    and           go to state 79
    or            go to state 80
    increment     go to state 81
    decrement     go to state 82
    add           go to state 83
    subtract      go to state 84
    multiply      go to state 85
    divide        go to state 86
    modulus       go to state 87
    exponentiate  go to state 88


state 127

   19 expr: expr . add expr
   20     | expr . subtract expr
   20     | expr subtract expr .
   21     | expr . multiply expr
   22     | expr . divide expr
   23     | expr . eq expr
   24     | expr . ne expr
   25     | expr . gt expr
   26     | expr . ge expr
   27     | expr . lt expr
   28     | expr . le expr
   29     | expr . and expr
   30     | expr . or expr
   32     | expr . increment
   33     | expr . decrement
   34     | expr . modulus expr
   35     | expr . exponentiate expr

    TOKEN_GE            shift, and go to state 59
    TOKEN_LE            shift, and go to state 60
    TOKEN_EQ            shift, and go to state 25
    TOKEN_NE            shift, and go to state 61
    TOKEN_LT            shift, and go to state 62
    TOKEN_GT            shift, and go to state 63
    TOKEN_AND           shift, and go to state 64
    TOKEN_OR            shift, and go to state 65
    TOKEN_INCREMENT     shift, and go to state 66
    TOKEN_DECREMENT     shift, and go to state 67
    TOKEN_ADD           shift, and go to state 68
    TOKEN_SUBTRACT      shift, and go to state 37
    TOKEN_MULTIPLY      shift, and go to state 69
    TOKEN_DIVIDE        shift, and go to state 70
    TOKEN_MODULUS       shift, and go to state 71
    TOKEN_EXPONENTIATE  shift, and go to state 72

    TOKEN_GE            [reduce using rule 20 (expr)]
    TOKEN_LE            [reduce using rule 20 (expr)]
    TOKEN_EQ            [reduce using rule 20 (expr)]
    TOKEN_NE            [reduce using rule 20 (expr)]
    TOKEN_LT            [reduce using rule 20 (expr)]
    TOKEN_GT            [reduce using rule 20 (expr)]
    TOKEN_AND           [reduce using rule 20 (expr)]
    TOKEN_OR            [reduce using rule 20 (expr)]
    TOKEN_INCREMENT     [reduce using rule 20 (expr)]
    TOKEN_DECREMENT     [reduce using rule 20 (expr)]
    TOKEN_ADD           [reduce using rule 20 (expr)]
    TOKEN_SUBTRACT      [reduce using rule 20 (expr)]
    TOKEN_MULTIPLY      [reduce using rule 20 (expr)]
    TOKEN_DIVIDE        [reduce using rule 20 (expr)]
    TOKEN_MODULUS       [reduce using rule 20 (expr)]
    TOKEN_EXPONENTIATE  [reduce using rule 20 (expr)]
    $default            reduce using rule 20 (expr)

    ge            go to state 73
    le            go to state 74
    eq            go to state 75
    ne            go to state 76
    lt            go to state 77
    gt            go to state 78
    and           go to state 79
    or            go to state 80
    increment     go to state 81
    decrement     go to state 82
    add           go to state 83
    subtract      go to state 84
    multiply      go to state 85
    divide        go to state 86
    modulus       go to state 87
    exponentiate  go to state 88


state 128

   19 expr: expr . add expr
   20     | expr . subtract expr
   21     | expr . multiply expr
   21     | expr multiply expr .
   22     | expr . divide expr
   23     | expr . eq expr
   24     | expr . ne expr
   25     | expr . gt expr
   26     | expr . ge expr
   27     | expr . lt expr
   28     | expr . le expr
   29     | expr . and expr
   30     | expr . or expr
   32     | expr . increment
   33     | expr . decrement
   34     | expr . modulus expr
   35     | expr . exponentiate expr

    TOKEN_GE            shift, and go to state 59
    TOKEN_LE            shift, and go to state 60
    TOKEN_EQ            shift, and go to state 25
    TOKEN_NE            shift, and go to state 61
    TOKEN_LT            shift, and go to state 62
    TOKEN_GT            shift, and go to state 63
    TOKEN_AND           shift, and go to state 64
    TOKEN_OR            shift, and go to state 65
    TOKEN_INCREMENT     shift, and go to state 66
    TOKEN_DECREMENT     shift, and go to state 67
    TOKEN_ADD           shift, and go to state 68
    TOKEN_SUBTRACT      shift, and go to state 37
    TOKEN_MULTIPLY      shift, and go to state 69
    TOKEN_DIVIDE        shift, and go to state 70
    TOKEN_MODULUS       shift, and go to state 71
    TOKEN_EXPONENTIATE  shift, and go to state 72

    TOKEN_GE            [reduce using rule 21 (expr)]
    TOKEN_LE            [reduce using rule 21 (expr)]
    TOKEN_EQ            [reduce using rule 21 (expr)]
    TOKEN_NE            [reduce using rule 21 (expr)]
    TOKEN_LT            [reduce using rule 21 (expr)]
    TOKEN_GT            [reduce using rule 21 (expr)]
    TOKEN_AND           [reduce using rule 21 (expr)]
    TOKEN_OR            [reduce using rule 21 (expr)]
    TOKEN_INCREMENT     [reduce using rule 21 (expr)]
    TOKEN_DECREMENT     [reduce using rule 21 (expr)]
    TOKEN_ADD           [reduce using rule 21 (expr)]
    TOKEN_SUBTRACT      [reduce using rule 21 (expr)]
    TOKEN_MULTIPLY      [reduce using rule 21 (expr)]
    TOKEN_DIVIDE        [reduce using rule 21 (expr)]
    TOKEN_MODULUS       [reduce using rule 21 (expr)]
    TOKEN_EXPONENTIATE  [reduce using rule 21 (expr)]
    $default            reduce using rule 21 (expr)

    ge            go to state 73
    le            go to state 74
    eq            go to state 75
    ne            go to state 76
    lt            go to state 77
    gt            go to state 78
    and           go to state 79
    or            go to state 80
    increment     go to state 81
    decrement     go to state 82
    add           go to state 83
    subtract      go to state 84
    multiply      go to state 85
    divide        go to state 86
    modulus       go to state 87
    exponentiate  go to state 88


state 129

   19 expr: expr . add expr
   20     | expr . subtract expr
   21     | expr . multiply expr
   22     | expr . divide expr
   22     | expr divide expr .
   23     | expr . eq expr
   24     | expr . ne expr
   25     | expr . gt expr
   26     | expr . ge expr
   27     | expr . lt expr
   28     | expr . le expr
   29     | expr . and expr
   30     | expr . or expr
   32     | expr . increment
   33     | expr . decrement
   34     | expr . modulus expr
   35     | expr . exponentiate expr

    TOKEN_GE            shift, and go to state 59
    TOKEN_LE            shift, and go to state 60
    TOKEN_EQ            shift, and go to state 25
    TOKEN_NE            shift, and go to state 61
    TOKEN_LT            shift, and go to state 62
    TOKEN_GT            shift, and go to state 63
    TOKEN_AND           shift, and go to state 64
    TOKEN_OR            shift, and go to state 65
    TOKEN_INCREMENT     shift, and go to state 66
    TOKEN_DECREMENT     shift, and go to state 67
    TOKEN_ADD           shift, and go to state 68
    TOKEN_SUBTRACT      shift, and go to state 37
    TOKEN_MULTIPLY      shift, and go to state 69
    TOKEN_DIVIDE        shift, and go to state 70
    TOKEN_MODULUS       shift, and go to state 71
    TOKEN_EXPONENTIATE  shift, and go to state 72

    TOKEN_GE            [reduce using rule 22 (expr)]
    TOKEN_LE            [reduce using rule 22 (expr)]
    TOKEN_EQ            [reduce using rule 22 (expr)]
    TOKEN_NE            [reduce using rule 22 (expr)]
    TOKEN_LT            [reduce using rule 22 (expr)]
    TOKEN_GT            [reduce using rule 22 (expr)]
    TOKEN_AND           [reduce using rule 22 (expr)]
    TOKEN_OR            [reduce using rule 22 (expr)]
    TOKEN_INCREMENT     [reduce using rule 22 (expr)]
    TOKEN_DECREMENT     [reduce using rule 22 (expr)]
    TOKEN_ADD           [reduce using rule 22 (expr)]
    TOKEN_SUBTRACT      [reduce using rule 22 (expr)]
    TOKEN_MULTIPLY      [reduce using rule 22 (expr)]
    TOKEN_DIVIDE        [reduce using rule 22 (expr)]
    TOKEN_MODULUS       [reduce using rule 22 (expr)]
    TOKEN_EXPONENTIATE  [reduce using rule 22 (expr)]
    $default            reduce using rule 22 (expr)

    ge            go to state 73
    le            go to state 74
    eq            go to state 75
    ne            go to state 76
    lt            go to state 77
    gt            go to state 78
    and           go to state 79
    or            go to state 80
    increment     go to state 81
    decrement     go to state 82
    add           go to state 83
    subtract      go to state 84
    multiply      go to state 85
    divide        go to state 86
    modulus       go to state 87
    exponentiate  go to state 88


state 130

   19 expr: expr . add expr
   20     | expr . subtract expr
   21     | expr . multiply expr
   22     | expr . divide expr
   23     | expr . eq expr
   24     | expr . ne expr
   25     | expr . gt expr
   26     | expr . ge expr
   27     | expr . lt expr
   28     | expr . le expr
   29     | expr . and expr
   30     | expr . or expr
   32     | expr . increment
   33     | expr . decrement
   34     | expr . modulus expr
   34     | expr modulus expr .
   35     | expr . exponentiate expr

    TOKEN_GE            shift, and go to state 59
    TOKEN_LE            shift, and go to state 60
    TOKEN_EQ            shift, and go to state 25
    TOKEN_NE            shift, and go to state 61
    TOKEN_LT            shift, and go to state 62
    TOKEN_GT            shift, and go to state 63
    TOKEN_AND           shift, and go to state 64
    TOKEN_OR            shift, and go to state 65
    TOKEN_INCREMENT     shift, and go to state 66
    TOKEN_DECREMENT     shift, and go to state 67
    TOKEN_ADD           shift, and go to state 68
    TOKEN_SUBTRACT      shift, and go to state 37
    TOKEN_MULTIPLY      shift, and go to state 69
    TOKEN_DIVIDE        shift, and go to state 70
    TOKEN_MODULUS       shift, and go to state 71
    TOKEN_EXPONENTIATE  shift, and go to state 72

    TOKEN_GE            [reduce using rule 34 (expr)]
    TOKEN_LE            [reduce using rule 34 (expr)]
    TOKEN_EQ            [reduce using rule 34 (expr)]
    TOKEN_NE            [reduce using rule 34 (expr)]
    TOKEN_LT            [reduce using rule 34 (expr)]
    TOKEN_GT            [reduce using rule 34 (expr)]
    TOKEN_AND           [reduce using rule 34 (expr)]
    TOKEN_OR            [reduce using rule 34 (expr)]
    TOKEN_INCREMENT     [reduce using rule 34 (expr)]
    TOKEN_DECREMENT     [reduce using rule 34 (expr)]
    TOKEN_ADD           [reduce using rule 34 (expr)]
    TOKEN_SUBTRACT      [reduce using rule 34 (expr)]
    TOKEN_MULTIPLY      [reduce using rule 34 (expr)]
    TOKEN_DIVIDE        [reduce using rule 34 (expr)]
    TOKEN_MODULUS       [reduce using rule 34 (expr)]
    TOKEN_EXPONENTIATE  [reduce using rule 34 (expr)]
    $default            reduce using rule 34 (expr)

    ge            go to state 73
    le            go to state 74
    eq            go to state 75
    ne            go to state 76
    lt            go to state 77
    gt            go to state 78
    and           go to state 79
    or            go to state 80
    increment     go to state 81
    decrement     go to state 82
    add           go to state 83
    subtract      go to state 84
    multiply      go to state 85
    divide        go to state 86
    modulus       go to state 87
    exponentiate  go to state 88


state 131

   19 expr: expr . add expr
   20     | expr . subtract expr
   21     | expr . multiply expr
   22     | expr . divide expr
   23     | expr . eq expr
   24     | expr . ne expr
   25     | expr . gt expr
   26     | expr . ge expr
   27     | expr . lt expr
   28     | expr . le expr
   29     | expr . and expr
   30     | expr . or expr
   32     | expr . increment
   33     | expr . decrement
   34     | expr . modulus expr
   35     | expr . exponentiate expr
   35     | expr exponentiate expr .

    TOKEN_GE            shift, and go to state 59
    TOKEN_LE            shift, and go to state 60
    TOKEN_EQ            shift, and go to state 25
    TOKEN_NE            shift, and go to state 61
    TOKEN_LT            shift, and go to state 62
    TOKEN_GT            shift, and go to state 63
    TOKEN_AND           shift, and go to state 64
    TOKEN_OR            shift, and go to state 65
    TOKEN_INCREMENT     shift, and go to state 66
    TOKEN_DECREMENT     shift, and go to state 67
    TOKEN_ADD           shift, and go to state 68
    TOKEN_SUBTRACT      shift, and go to state 37
    TOKEN_MULTIPLY      shift, and go to state 69
    TOKEN_DIVIDE        shift, and go to state 70
    TOKEN_MODULUS       shift, and go to state 71
    TOKEN_EXPONENTIATE  shift, and go to state 72

    TOKEN_GE            [reduce using rule 35 (expr)]
    TOKEN_LE            [reduce using rule 35 (expr)]
    TOKEN_EQ            [reduce using rule 35 (expr)]
    TOKEN_NE            [reduce using rule 35 (expr)]
    TOKEN_LT            [reduce using rule 35 (expr)]
    TOKEN_GT            [reduce using rule 35 (expr)]
    TOKEN_AND           [reduce using rule 35 (expr)]
    TOKEN_OR            [reduce using rule 35 (expr)]
    TOKEN_INCREMENT     [reduce using rule 35 (expr)]
    TOKEN_DECREMENT     [reduce using rule 35 (expr)]
    TOKEN_ADD           [reduce using rule 35 (expr)]
    TOKEN_SUBTRACT      [reduce using rule 35 (expr)]
    TOKEN_MULTIPLY      [reduce using rule 35 (expr)]
    TOKEN_DIVIDE        [reduce using rule 35 (expr)]
    TOKEN_MODULUS       [reduce using rule 35 (expr)]
    TOKEN_EXPONENTIATE  [reduce using rule 35 (expr)]
    $default            reduce using rule 35 (expr)

    ge            go to state 73
    le            go to state 74
    eq            go to state 75
    ne            go to state 76
    lt            go to state 77
    gt            go to state 78
    and           go to state 79
    or            go to state 80
    increment     go to state 81
    decrement     go to state 82
    add           go to state 83
    subtract      go to state 84
    multiply      go to state 85
    divide        go to state 86
    modulus       go to state 87
    exponentiate  go to state 88


state 132

  102 comma: TOKEN_COMMA .

    $default  reduce using rule 102 (comma)


state 133

   41 not_empty_expr_list: expr comma . not_empty_expr_list

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    expr                 go to state 90
    not_empty_expr_list  go to state 153
    primary_expr         go to state 44
    left_brace           go to state 45
    left_paren           go to state 46
    not                  go to state 47
    subtract             go to state 48
    true                 go to state 49
    false                go to state 50
    char_literal         go to state 51
    integer_literal      go to state 52
    string_literal       go to state 53
    identifier           go to state 54


state 134

   73 right_brace: TOKEN_RIGHT_BRACE .

    $default  reduce using rule 73 (right_brace)


state 135

   51 primary_expr: left_brace not_empty_expr_list right_brace .

    $default  reduce using rule 51 (primary_expr)


state 136

   75 right_paren: TOKEN_RIGHT_PAREN .

    $default  reduce using rule 75 (right_paren)


state 137

   50 primary_expr: left_paren expr right_paren .

    $default  reduce using rule 50 (primary_expr)


state 138

   19 expr: expr . add expr
   20     | expr . subtract expr
   21     | expr . multiply expr
   22     | expr . divide expr
   23     | expr . eq expr
   24     | expr . ne expr
   25     | expr . gt expr
   26     | expr . ge expr
   27     | expr . lt expr
   28     | expr . le expr
   29     | expr . and expr
   30     | expr . or expr
   32     | expr . increment
   33     | expr . decrement
   34     | expr . modulus expr
   35     | expr . exponentiate expr
   53 primary_expr: subtract left_paren expr . right_paren

    TOKEN_RIGHT_PAREN   shift, and go to state 136
    TOKEN_GE            shift, and go to state 59
    TOKEN_LE            shift, and go to state 60
    TOKEN_EQ            shift, and go to state 25
    TOKEN_NE            shift, and go to state 61
    TOKEN_LT            shift, and go to state 62
    TOKEN_GT            shift, and go to state 63
    TOKEN_AND           shift, and go to state 64
    TOKEN_OR            shift, and go to state 65
    TOKEN_INCREMENT     shift, and go to state 66
    TOKEN_DECREMENT     shift, and go to state 67
    TOKEN_ADD           shift, and go to state 68
    TOKEN_SUBTRACT      shift, and go to state 37
    TOKEN_MULTIPLY      shift, and go to state 69
    TOKEN_DIVIDE        shift, and go to state 70
    TOKEN_MODULUS       shift, and go to state 71
    TOKEN_EXPONENTIATE  shift, and go to state 72

    right_paren   go to state 154
    ge            go to state 73
    le            go to state 74
    eq            go to state 75
    ne            go to state 76
    lt            go to state 77
    gt            go to state 78
    and           go to state 79
    or            go to state 80
    increment     go to state 81
    decrement     go to state 82
    add           go to state 83
    subtract      go to state 84
    multiply      go to state 85
    divide        go to state 86
    modulus       go to state 87
    exponentiate  go to state 88


state 139

   44 primary_expr: identifier left_paren expr_list . right_paren

    TOKEN_RIGHT_PAREN  shift, and go to state 136

    right_paren  go to state 155


state 140

   39 expr_list: not_empty_expr_list .

    $default  reduce using rule 39 (expr_list)


state 141

   17 not_empty_stmt_list: stmt not_empty_stmt_list .

    $default  reduce using rule 17 (not_empty_stmt_list)


state 142

    6 decl: identifier colon type assign left_brace stmt_list right_brace .

    $default  reduce using rule 6 (decl)


state 143

    8 stmt: expr semicolon .

    $default  reduce using rule 8 (stmt)


state 144

   10 stmt: print expr_list . semicolon

    TOKEN_SEMICOLON  shift, and go to state 27

    semicolon  go to state 156


state 145

   11 stmt: for left_paren . opt_expr semicolon opt_expr semicolon opt_expr right_paren stmt

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    $default  reduce using rule 38 (opt_expr)

    expr             go to state 57
    opt_expr         go to state 157
    primary_expr     go to state 44
    left_brace       go to state 45
    left_paren       go to state 46
    not              go to state 47
    subtract         go to state 48
    true             go to state 49
    false            go to state 50
    char_literal     go to state 51
    integer_literal  go to state 52
    string_literal   go to state 53
    identifier       go to state 54


state 146

   12 stmt: if expr . stmt
   13     | if expr . stmt else stmt
   19 expr: expr . add expr
   20     | expr . subtract expr
   21     | expr . multiply expr
   22     | expr . divide expr
   23     | expr . eq expr
   24     | expr . ne expr
   25     | expr . gt expr
   26     | expr . ge expr
   27     | expr . lt expr
   28     | expr . le expr
   29     | expr . and expr
   30     | expr . or expr
   32     | expr . increment
   33     | expr . decrement
   34     | expr . modulus expr
   35     | expr . exponentiate expr

    TOKEN_PRINT            shift, and go to state 97
    TOKEN_FOR              shift, and go to state 98
    TOKEN_IF               shift, and go to state 99
    TOKEN_RETURN           shift, and go to state 100
    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_GE               shift, and go to state 59
    TOKEN_LE               shift, and go to state 60
    TOKEN_EQ               shift, and go to state 25
    TOKEN_NE               shift, and go to state 61
    TOKEN_LT               shift, and go to state 62
    TOKEN_GT               shift, and go to state 63
    TOKEN_AND              shift, and go to state 64
    TOKEN_OR               shift, and go to state 65
    TOKEN_NOT              shift, and go to state 36
    TOKEN_INCREMENT        shift, and go to state 66
    TOKEN_DECREMENT        shift, and go to state 67
    TOKEN_ADD              shift, and go to state 68
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_MULTIPLY         shift, and go to state 69
    TOKEN_DIVIDE           shift, and go to state 70
    TOKEN_MODULUS          shift, and go to state 71
    TOKEN_EXPONENTIATE     shift, and go to state 72
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    decl             go to state 101
    stmt             go to state 158
    expr             go to state 105
    primary_expr     go to state 44
    print            go to state 106
    for              go to state 107
    if               go to state 108
    return           go to state 109
    left_brace       go to state 110
    left_paren       go to state 46
    ge               go to state 73
    le               go to state 74
    eq               go to state 75
    ne               go to state 76
    lt               go to state 77
    gt               go to state 78
    and              go to state 79
    or               go to state 80
    not              go to state 47
    increment        go to state 81
    decrement        go to state 82
    add              go to state 83
    subtract         go to state 159
    multiply         go to state 85
    divide           go to state 86
    modulus          go to state 87
    exponentiate     go to state 88
    true             go to state 49
    false            go to state 50
    char_literal     go to state 51
    integer_literal  go to state 52
    string_literal   go to state 53
    identifier       go to state 111


state 147

    9 stmt: return opt_expr . semicolon

    TOKEN_SEMICOLON  shift, and go to state 27

    semicolon  go to state 160


state 148

   14 stmt: left_brace stmt_list . right_brace

    TOKEN_RIGHT_BRACE  shift, and go to state 134

    right_brace  go to state 161


state 149

    8 stmt: expr . semicolon
   19 expr: expr . add expr
   20     | expr . subtract expr
   21     | expr . multiply expr
   22     | expr . divide expr
   23     | expr . eq expr
   24     | expr . ne expr
   25     | expr . gt expr
   26     | expr . ge expr
   27     | expr . lt expr
   28     | expr . le expr
   29     | expr . and expr
   30     | expr . or expr
   32     | expr . increment
   33     | expr . decrement
   34     | expr . modulus expr
   35     | expr . exponentiate expr
   41 not_empty_expr_list: expr . comma not_empty_expr_list
   42                    | expr .

    TOKEN_GE            shift, and go to state 59
    TOKEN_LE            shift, and go to state 60
    TOKEN_EQ            shift, and go to state 25
    TOKEN_NE            shift, and go to state 61
    TOKEN_LT            shift, and go to state 62
    TOKEN_GT            shift, and go to state 63
    TOKEN_AND           shift, and go to state 64
    TOKEN_OR            shift, and go to state 65
    TOKEN_INCREMENT     shift, and go to state 66
    TOKEN_DECREMENT     shift, and go to state 67
    TOKEN_ADD           shift, and go to state 68
    TOKEN_SUBTRACT      shift, and go to state 37
    TOKEN_MULTIPLY      shift, and go to state 69
    TOKEN_DIVIDE        shift, and go to state 70
    TOKEN_MODULUS       shift, and go to state 71
    TOKEN_EXPONENTIATE  shift, and go to state 72
    TOKEN_COMMA         shift, and go to state 132
    TOKEN_SEMICOLON     shift, and go to state 27

    $default  reduce using rule 42 (not_empty_expr_list)

    ge            go to state 73
    le            go to state 74
    eq            go to state 75
    ne            go to state 76
    lt            go to state 77
    gt            go to state 78
    and           go to state 79
    or            go to state 80
    increment     go to state 81
    decrement     go to state 82
    add           go to state 83
    subtract      go to state 84
    multiply      go to state 85
    divide        go to state 86
    modulus       go to state 87
    exponentiate  go to state 88
    comma         go to state 133
    semicolon     go to state 143


state 150

   60 type: function type left_paren param_list right_paren .

    $default  reduce using rule 60 (type)


state 151

   64 not_empty_param_list: param comma . not_empty_param_list

    TOKEN_IDENTIFIER  shift, and go to state 1

    not_empty_param_list  go to state 162
    param                 go to state 114
    identifier            go to state 115


state 152

   59 type: array left_bracket opt_expr right_bracket type .

    $default  reduce using rule 59 (type)


state 153

   41 not_empty_expr_list: expr comma not_empty_expr_list .

    $default  reduce using rule 41 (not_empty_expr_list)


state 154

   53 primary_expr: subtract left_paren expr right_paren .

    $default  reduce using rule 53 (primary_expr)


state 155

   44 primary_expr: identifier left_paren expr_list right_paren .

    $default  reduce using rule 44 (primary_expr)


state 156

   10 stmt: print expr_list semicolon .

    $default  reduce using rule 10 (stmt)


state 157

   11 stmt: for left_paren opt_expr . semicolon opt_expr semicolon opt_expr right_paren stmt

    TOKEN_SEMICOLON  shift, and go to state 27

    semicolon  go to state 163


state 158

   12 stmt: if expr stmt .
   13     | if expr stmt . else stmt

    TOKEN_ELSE  shift, and go to state 164

    TOKEN_ELSE  [reduce using rule 12 (stmt)]
    $default    reduce using rule 12 (stmt)

    else  go to state 165


state 159

   20 expr: expr subtract . expr
   52 primary_expr: subtract . integer_literal
   53             | subtract . left_paren expr right_paren

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    expr             go to state 127
    primary_expr     go to state 44
    left_brace       go to state 45
    left_paren       go to state 166
    not              go to state 47
    subtract         go to state 48
    true             go to state 49
    false            go to state 50
    char_literal     go to state 51
    integer_literal  go to state 167
    string_literal   go to state 53
    identifier       go to state 54


state 160

    9 stmt: return opt_expr semicolon .

    $default  reduce using rule 9 (stmt)


state 161

   14 stmt: left_brace stmt_list right_brace .

    $default  reduce using rule 14 (stmt)


state 162

   64 not_empty_param_list: param comma not_empty_param_list .

    $default  reduce using rule 64 (not_empty_param_list)


state 163

   11 stmt: for left_paren opt_expr semicolon . opt_expr semicolon opt_expr right_paren stmt

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    $default  reduce using rule 38 (opt_expr)

    expr             go to state 57
    opt_expr         go to state 168
    primary_expr     go to state 44
    left_brace       go to state 45
    left_paren       go to state 46
    not              go to state 47
    subtract         go to state 48
    true             go to state 49
    false            go to state 50
    char_literal     go to state 51
    integer_literal  go to state 52
    string_literal   go to state 53
    identifier       go to state 54


state 164

   70 else: TOKEN_ELSE .

    $default  reduce using rule 70 (else)


state 165

   13 stmt: if expr stmt else . stmt

    TOKEN_PRINT            shift, and go to state 97
    TOKEN_FOR              shift, and go to state 98
    TOKEN_IF               shift, and go to state 99
    TOKEN_RETURN           shift, and go to state 100
    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    decl             go to state 101
    stmt             go to state 169
    expr             go to state 105
    primary_expr     go to state 44
    print            go to state 106
    for              go to state 107
    if               go to state 108
    return           go to state 109
    left_brace       go to state 110
    left_paren       go to state 46
    not              go to state 47
    subtract         go to state 48
    true             go to state 49
    false            go to state 50
    char_literal     go to state 51
    integer_literal  go to state 52
    string_literal   go to state 53
    identifier       go to state 111


state 166

   50 primary_expr: left_paren . expr right_paren
   53             | subtract left_paren . expr right_paren

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    expr             go to state 170
    primary_expr     go to state 44
    left_brace       go to state 45
    left_paren       go to state 46
    not              go to state 47
    subtract         go to state 48
    true             go to state 49
    false            go to state 50
    char_literal     go to state 51
    integer_literal  go to state 52
    string_literal   go to state 53
    identifier       go to state 54


state 167

   45 primary_expr: integer_literal .
   52             | subtract integer_literal .

    TOKEN_GE            reduce using rule 45 (primary_expr)
    TOKEN_GE            [reduce using rule 52 (primary_expr)]
    TOKEN_LE            reduce using rule 45 (primary_expr)
    TOKEN_LE            [reduce using rule 52 (primary_expr)]
    TOKEN_EQ            reduce using rule 45 (primary_expr)
    TOKEN_EQ            [reduce using rule 52 (primary_expr)]
    TOKEN_NE            reduce using rule 45 (primary_expr)
    TOKEN_NE            [reduce using rule 52 (primary_expr)]
    TOKEN_LT            reduce using rule 45 (primary_expr)
    TOKEN_LT            [reduce using rule 52 (primary_expr)]
    TOKEN_GT            reduce using rule 45 (primary_expr)
    TOKEN_GT            [reduce using rule 52 (primary_expr)]
    TOKEN_AND           reduce using rule 45 (primary_expr)
    TOKEN_AND           [reduce using rule 52 (primary_expr)]
    TOKEN_OR            reduce using rule 45 (primary_expr)
    TOKEN_OR            [reduce using rule 52 (primary_expr)]
    TOKEN_INCREMENT     reduce using rule 45 (primary_expr)
    TOKEN_INCREMENT     [reduce using rule 52 (primary_expr)]
    TOKEN_DECREMENT     reduce using rule 45 (primary_expr)
    TOKEN_DECREMENT     [reduce using rule 52 (primary_expr)]
    TOKEN_ADD           reduce using rule 45 (primary_expr)
    TOKEN_ADD           [reduce using rule 52 (primary_expr)]
    TOKEN_SUBTRACT      reduce using rule 45 (primary_expr)
    TOKEN_SUBTRACT      [reduce using rule 52 (primary_expr)]
    TOKEN_MULTIPLY      reduce using rule 45 (primary_expr)
    TOKEN_MULTIPLY      [reduce using rule 52 (primary_expr)]
    TOKEN_DIVIDE        reduce using rule 45 (primary_expr)
    TOKEN_DIVIDE        [reduce using rule 52 (primary_expr)]
    TOKEN_MODULUS       reduce using rule 45 (primary_expr)
    TOKEN_MODULUS       [reduce using rule 52 (primary_expr)]
    TOKEN_EXPONENTIATE  reduce using rule 45 (primary_expr)
    TOKEN_EXPONENTIATE  [reduce using rule 52 (primary_expr)]
    TOKEN_SEMICOLON     reduce using rule 52 (primary_expr)
    $default            reduce using rule 45 (primary_expr)


state 168

   11 stmt: for left_paren opt_expr semicolon opt_expr . semicolon opt_expr right_paren stmt

    TOKEN_SEMICOLON  shift, and go to state 27

    semicolon  go to state 171


state 169

   13 stmt: if expr stmt else stmt .

    $default  reduce using rule 13 (stmt)


state 170

   19 expr: expr . add expr
   20     | expr . subtract expr
   21     | expr . multiply expr
   22     | expr . divide expr
   23     | expr . eq expr
   24     | expr . ne expr
   25     | expr . gt expr
   26     | expr . ge expr
   27     | expr . lt expr
   28     | expr . le expr
   29     | expr . and expr
   30     | expr . or expr
   32     | expr . increment
   33     | expr . decrement
   34     | expr . modulus expr
   35     | expr . exponentiate expr
   50 primary_expr: left_paren expr . right_paren
   53             | subtract left_paren expr . right_paren

    TOKEN_RIGHT_PAREN   shift, and go to state 136
    TOKEN_GE            shift, and go to state 59
    TOKEN_LE            shift, and go to state 60
    TOKEN_EQ            shift, and go to state 25
    TOKEN_NE            shift, and go to state 61
    TOKEN_LT            shift, and go to state 62
    TOKEN_GT            shift, and go to state 63
    TOKEN_AND           shift, and go to state 64
    TOKEN_OR            shift, and go to state 65
    TOKEN_INCREMENT     shift, and go to state 66
    TOKEN_DECREMENT     shift, and go to state 67
    TOKEN_ADD           shift, and go to state 68
    TOKEN_SUBTRACT      shift, and go to state 37
    TOKEN_MULTIPLY      shift, and go to state 69
    TOKEN_DIVIDE        shift, and go to state 70
    TOKEN_MODULUS       shift, and go to state 71
    TOKEN_EXPONENTIATE  shift, and go to state 72

    right_paren   go to state 172
    ge            go to state 73
    le            go to state 74
    eq            go to state 75
    ne            go to state 76
    lt            go to state 77
    gt            go to state 78
    and           go to state 79
    or            go to state 80
    increment     go to state 81
    decrement     go to state 82
    add           go to state 83
    subtract      go to state 84
    multiply      go to state 85
    divide        go to state 86
    modulus       go to state 87
    exponentiate  go to state 88


state 171

   11 stmt: for left_paren opt_expr semicolon opt_expr semicolon . opt_expr right_paren stmt

    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    $default  reduce using rule 38 (opt_expr)

    expr             go to state 57
    opt_expr         go to state 173
    primary_expr     go to state 44
    left_brace       go to state 45
    left_paren       go to state 46
    not              go to state 47
    subtract         go to state 48
    true             go to state 49
    false            go to state 50
    char_literal     go to state 51
    integer_literal  go to state 52
    string_literal   go to state 53
    identifier       go to state 54


state 172

   50 primary_expr: left_paren expr right_paren .
   53             | subtract left_paren expr right_paren .

    TOKEN_GE            reduce using rule 50 (primary_expr)
    TOKEN_GE            [reduce using rule 53 (primary_expr)]
    TOKEN_LE            reduce using rule 50 (primary_expr)
    TOKEN_LE            [reduce using rule 53 (primary_expr)]
    TOKEN_EQ            reduce using rule 50 (primary_expr)
    TOKEN_EQ            [reduce using rule 53 (primary_expr)]
    TOKEN_NE            reduce using rule 50 (primary_expr)
    TOKEN_NE            [reduce using rule 53 (primary_expr)]
    TOKEN_LT            reduce using rule 50 (primary_expr)
    TOKEN_LT            [reduce using rule 53 (primary_expr)]
    TOKEN_GT            reduce using rule 50 (primary_expr)
    TOKEN_GT            [reduce using rule 53 (primary_expr)]
    TOKEN_AND           reduce using rule 50 (primary_expr)
    TOKEN_AND           [reduce using rule 53 (primary_expr)]
    TOKEN_OR            reduce using rule 50 (primary_expr)
    TOKEN_OR            [reduce using rule 53 (primary_expr)]
    TOKEN_INCREMENT     reduce using rule 50 (primary_expr)
    TOKEN_INCREMENT     [reduce using rule 53 (primary_expr)]
    TOKEN_DECREMENT     reduce using rule 50 (primary_expr)
    TOKEN_DECREMENT     [reduce using rule 53 (primary_expr)]
    TOKEN_ADD           reduce using rule 50 (primary_expr)
    TOKEN_ADD           [reduce using rule 53 (primary_expr)]
    TOKEN_SUBTRACT      reduce using rule 50 (primary_expr)
    TOKEN_SUBTRACT      [reduce using rule 53 (primary_expr)]
    TOKEN_MULTIPLY      reduce using rule 50 (primary_expr)
    TOKEN_MULTIPLY      [reduce using rule 53 (primary_expr)]
    TOKEN_DIVIDE        reduce using rule 50 (primary_expr)
    TOKEN_DIVIDE        [reduce using rule 53 (primary_expr)]
    TOKEN_MODULUS       reduce using rule 50 (primary_expr)
    TOKEN_MODULUS       [reduce using rule 53 (primary_expr)]
    TOKEN_EXPONENTIATE  reduce using rule 50 (primary_expr)
    TOKEN_EXPONENTIATE  [reduce using rule 53 (primary_expr)]
    TOKEN_SEMICOLON     reduce using rule 53 (primary_expr)
    $default            reduce using rule 50 (primary_expr)


state 173

   11 stmt: for left_paren opt_expr semicolon opt_expr semicolon opt_expr . right_paren stmt

    TOKEN_RIGHT_PAREN  shift, and go to state 136

    right_paren  go to state 174


state 174

   11 stmt: for left_paren opt_expr semicolon opt_expr semicolon opt_expr right_paren . stmt

    TOKEN_PRINT            shift, and go to state 97
    TOKEN_FOR              shift, and go to state 98
    TOKEN_IF               shift, and go to state 99
    TOKEN_RETURN           shift, and go to state 100
    TOKEN_LEFT_BRACE       shift, and go to state 34
    TOKEN_LEFT_PAREN       shift, and go to state 35
    TOKEN_NOT              shift, and go to state 36
    TOKEN_SUBTRACT         shift, and go to state 37
    TOKEN_TRUE             shift, and go to state 38
    TOKEN_FALSE            shift, and go to state 39
    TOKEN_CHAR_LITERAL     shift, and go to state 40
    TOKEN_INTEGER_LITERAL  shift, and go to state 41
    TOKEN_STRING_LITERAL   shift, and go to state 42
    TOKEN_IDENTIFIER       shift, and go to state 1

    decl             go to state 101
    stmt             go to state 175
    expr             go to state 105
    primary_expr     go to state 44
    print            go to state 106
    for              go to state 107
    if               go to state 108
    return           go to state 109
    left_brace       go to state 110
    left_paren       go to state 46
    not              go to state 47
    subtract         go to state 48
    true             go to state 49
    false            go to state 50
    char_literal     go to state 51
    integer_literal  go to state 52
    string_literal   go to state 53
    identifier       go to state 111


state 175

   11 stmt: for left_paren opt_expr semicolon opt_expr semicolon opt_expr right_paren stmt .

    $default  reduce using rule 11 (stmt)
